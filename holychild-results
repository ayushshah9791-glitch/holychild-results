<!DOCTYPE html>
<!-- saved from url=(0152)https://ppl-ai-code-interpreter-files.s3.amazonaws.com/web/direct-files/476b430e061cafb515a1dc260976979d/4e873742-d94b-4777-aff0-28e029d966bc/index.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Result Management System - Class 9</title>
    <link rel="stylesheet" href="./School Result Management System - Class 9_files/all.min.css">
    <script src="./School Result Management System - Class 9_files/chart.js.download"></script>
    
    <style>
        :root {
  /* Primitive Color Tokens */
  --color-white: rgba(255, 255, 255, 1);
  --color-black: rgba(0, 0, 0, 1);
  --color-cream-50: rgba(252, 252, 249, 1);
  --color-cream-100: rgba(255, 255, 253, 1);
  --color-gray-200: rgba(245, 245, 245, 1);
  --color-gray-300: rgba(167, 169, 169, 1);
  --color-gray-400: rgba(119, 124, 124, 1);
  --color-slate-500: rgba(98, 108, 113, 1);
  --color-brown-600: rgba(94, 82, 64, 1);
  --color-charcoal-700: rgba(31, 33, 33, 1);
  --color-charcoal-800: rgba(38, 40, 40, 1);
  --color-slate-900: rgba(19, 52, 59, 1);
  --color-teal-300: rgba(50, 184, 198, 1);
  --color-teal-400: rgba(45, 166, 178, 1);
  --color-teal-500: rgba(33, 128, 141, 1);
  --color-teal-600: rgba(29, 116, 128, 1);
  --color-teal-700: rgba(26, 104, 115, 1);
  --color-teal-800: rgba(41, 150, 161, 1);
  --color-red-400: rgba(255, 84, 89, 1);
  --color-red-500: rgba(192, 21, 47, 1);
  --color-orange-400: rgba(230, 129, 97, 1);
  --color-orange-500: rgba(168, 75, 47, 1);

  /* RGB versions for opacity control */
  --color-brown-600-rgb: 94, 82, 64;
  --color-teal-500-rgb: 33, 128, 141;
  --color-slate-900-rgb: 19, 52, 59;
  --color-slate-500-rgb: 98, 108, 113;
  --color-red-500-rgb: 192, 21, 47;
  --color-red-400-rgb: 255, 84, 89;
  --color-orange-500-rgb: 168, 75, 47;
  --color-orange-400-rgb: 230, 129, 97;

  /* Background color tokens (Light Mode) */
  --color-bg-1: rgba(59, 130, 246, 0.08); /* Light blue */
  --color-bg-2: rgba(245, 158, 11, 0.08); /* Light yellow */
  --color-bg-3: rgba(34, 197, 94, 0.08); /* Light green */
  --color-bg-4: rgba(239, 68, 68, 0.08); /* Light red */
  --color-bg-5: rgba(147, 51, 234, 0.08); /* Light purple */
  --color-bg-6: rgba(249, 115, 22, 0.08); /* Light orange */
  --color-bg-7: rgba(236, 72, 153, 0.08); /* Light pink */
  --color-bg-8: rgba(6, 182, 212, 0.08); /* Light cyan */

  /* Semantic Color Tokens (Light Mode) */
  --color-background: var(--color-cream-50);
  --color-surface: var(--color-cream-100);
  --color-text: var(--color-slate-900);
  --color-text-secondary: var(--color-slate-500);
  --color-primary: var(--color-teal-500);
  --color-primary-hover: var(--color-teal-600);
  --color-primary-active: var(--color-teal-700);
  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  --color-btn-primary-text: var(--color-cream-50);
  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  --color-error: var(--color-red-500);
  --color-success: var(--color-teal-500);
  --color-warning: var(--color-orange-500);
  --color-info: var(--color-slate-500);
  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);
  --color-select-caret: rgba(var(--color-slate-900-rgb), 0.8);

  /* Common style patterns */
  --focus-ring: 0 0 0 3px var(--color-focus-ring);
  --focus-outline: 2px solid var(--color-primary);
  --status-bg-opacity: 0.15;
  --status-border-opacity: 0.25;
  --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

  /* RGB versions for opacity control */
  --color-success-rgb: 33, 128, 141;
  --color-error-rgb: 192, 21, 47;
  --color-warning-rgb: 168, 75, 47;
  --color-info-rgb: 98, 108, 113;

  /* Typography */
  --font-family-base: "FKGroteskNeue", "Geist", "Inter", -apple-system,
    BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  --font-family-mono: "Berkeley Mono", ui-monospace, SFMono-Regular, Menlo,
    Monaco, Consolas, monospace;
  --font-size-xs: 11px;
  --font-size-sm: 12px;
  --font-size-base: 14px;
  --font-size-md: 14px;
  --font-size-lg: 16px;
  --font-size-xl: 18px;
  --font-size-2xl: 20px;
  --font-size-3xl: 24px;
  --font-size-4xl: 30px;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 550;
  --font-weight-bold: 600;
  --line-height-tight: 1.2;
  --line-height-normal: 1.5;
  --letter-spacing-tight: -0.01em;

  /* Spacing */
  --space-0: 0;
  --space-1: 1px;
  --space-2: 2px;
  --space-4: 4px;
  --space-6: 6px;
  --space-8: 8px;
  --space-10: 10px;
  --space-12: 12px;
  --space-16: 16px;
  --space-20: 20px;
  --space-24: 24px;
  --space-32: 32px;

  /* Border Radius */
  --radius-sm: 6px;
  --radius-base: 8px;
  --radius-md: 10px;
  --radius-lg: 12px;
  --radius-full: 9999px;

  /* Shadows */
  --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.04),
    0 2px 4px -1px rgba(0, 0, 0, 0.02);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.04),
    0 4px 6px -2px rgba(0, 0, 0, 0.02);
  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(0, 0, 0, 0.03);

  /* Animation */
  --duration-fast: 150ms;
  --duration-normal: 250ms;
  --ease-standard: cubic-bezier(0.16, 1, 0.3, 1);

  /* Layout */
  --container-sm: 640px;
  --container-md: 768px;
  --container-lg: 1024px;
  --container-xl: 1280px;
}

/* Dark mode colors */
@media (prefers-color-scheme: dark) {
  :root {
    /* RGB versions for opacity control (Dark Mode) */
    --color-gray-400-rgb: 119, 124, 124;
    --color-teal-300-rgb: 50, 184, 198;
    --color-gray-300-rgb: 167, 169, 169;
    --color-gray-200-rgb: 245, 245, 245;

    /* Background color tokens (Dark Mode) */
    --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
    --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
    --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
    --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
    --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
    --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
    --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
    --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */

    /* Semantic Color Tokens (Dark Mode) */
    --color-background: var(--color-charcoal-700);
    --color-surface: var(--color-charcoal-800);
    --color-text: var(--color-gray-200);
    --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
    --color-primary: var(--color-teal-300);
    --color-primary-hover: var(--color-teal-400);
    --color-primary-active: var(--color-teal-800);
    --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
    --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
    --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
    --color-border: rgba(var(--color-gray-400-rgb), 0.3);
    --color-error: var(--color-red-400);
    --color-success: var(--color-teal-300);
    --color-warning: var(--color-orange-400);
    --color-info: var(--color-gray-300);
    --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
    --color-btn-primary-text: var(--color-slate-900);
    --color-card-border: rgba(var(--color-gray-400-rgb), 0.2);
    --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
    --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
      inset 0 -1px 0 rgba(0, 0, 0, 0.15);
    --button-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);

    /* RGB versions for dark mode */
    --color-success-rgb: var(--color-teal-300-rgb);
    --color-error-rgb: var(--color-red-400-rgb);
    --color-warning-rgb: var(--color-orange-400-rgb);
    --color-info-rgb: var(--color-gray-300-rgb);
  }
}

@font-face {
  font-family: 'FKGroteskNeue';
  src: url('https://r2cdn.perplexity.ai/fonts/FKGroteskNeue.woff2')
    format('woff2');
}

/* Base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--font-family-base);
    line-height: var(--line-height-normal);
    color: var(--color-text);
    background-color: var(--color-background);
    overflow-x: hidden;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-20);
}

/* School Management System Styles */
.login-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--color-bg-1) 0%, var(--color-bg-3) 100%);
}

.login-card {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-32);
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--color-card-border);
    width: 100%;
    max-width: 400px;
    text-align: center;
}

.login-tabs {
    display: flex;
    margin-bottom: var(--space-24);
    border-radius: var(--radius-base);
    overflow: hidden;
    border: 1px solid var(--color-border);
}

.login-tab {
    flex: 1;
    padding: var(--space-12);
    background: var(--color-secondary);
    border: none;
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-standard);
    color: var(--color-text);
    font-weight: var(--font-weight-medium);
}

.login-tab.active {
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
}

.login-form {
    display: none;
}

.login-form.active {
    display: block;
}

.dashboard {
    display: none;
    min-height: 100vh;
    background: var(--color-background);
}

.dashboard.active {
    display: block;
}

.dashboard-header {
    background: var(--color-surface);
    padding: var(--space-20);
    border-bottom: 1px solid var(--color-border);
    box-shadow: var(--shadow-sm);
}

.dashboard-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.user-info {
    display: flex;
    align-items: center;
    gap: var(--space-16);
}

.user-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: var(--color-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-btn-primary-text);
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-lg);
}

.dashboard-content {
    padding: var(--space-32);
}

.section {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-24);
    margin-bottom: var(--space-24);
    border: 1px solid var(--color-card-border);
    box-shadow: var(--shadow-sm);
}

.section-title {
    margin-bottom: var(--space-20);
    color: var(--color-text);
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
}

.chart-container {
    position: relative;
    height: 300px;
    margin-bottom: var(--space-20);
}

.marks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-16);
}

.mark-input-group {
    margin-bottom: var(--space-16);
}

.mark-input-group label {
    display: block;
    margin-bottom: var(--space-8);
    font-weight: var(--font-weight-medium);
    color: var(--color-text);
}

.mark-input-group input {
    width: 100%;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-background);
    color: var(--color-text);
    transition: border-color var(--duration-fast) var(--ease-standard);
}

.mark-input-group input:focus {
    outline: none;
    border-color: var(--color-primary);
}

.results-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--space-16);
    margin: var(--space-20) 0;
}

.result-item {
    text-align: center;
    padding: var(--space-16);
    background: var(--color-bg-1);
    border-radius: var(--radius-base);
    border: 1px solid var(--color-border);
}

.result-value {
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-bold);
    color: var(--color-primary);
    display: block;
}

.result-label {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    margin-top: var(--space-4);
}

.performance-analysis {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-16);
}

.performance-card {
    padding: var(--space-16);
    background: var(--color-bg-2);
    border-radius: var(--radius-base);
    border: 1px solid var(--color-border);
}

.performance-card h4 {
    margin-bottom: var(--space-8);
    color: var(--color-text);
}

.students-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: var(--space-16);
}

.students-table th,
.students-table td {
    padding: var(--space-12);
    text-align: left;
    border-bottom: 1px solid var(--color-border);
}

.students-table th {
    background: var(--color-secondary);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
}

.students-table tr:hover {
    background: var(--color-bg-1);
}

.search-bar {
    margin-bottom: var(--space-20);
    display: flex;
    gap: var(--space-12);
    align-items: center;
}

.search-bar input {
    flex: 1;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-background);
    color: var(--color-text);
}

.teacher-tabs {
    display: flex;
    gap: var(--space-8);
    margin-bottom: var(--space-24);
    border-bottom: 2px solid var(--color-border);
}

.teacher-tab {
    padding: var(--space-12) var(--space-20);
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-secondary);
    font-weight: var(--font-weight-medium);
    border-bottom: 2px solid transparent;
    transition: all var(--duration-fast) var(--ease-standard);
}

.teacher-tab.active {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.comparison-controls {
    margin-bottom: var(--space-24);
}

.student-checkbox {
    margin: var(--space-8) 0;
    display: flex;
    align-items: center;
    gap: var(--space-8);
}

.ranking-item {
    display: flex;
    align-items: center;
    gap: var(--space-16);
    padding: var(--space-16);
    background: var(--color-bg-1);
    border-radius: var(--radius-base);
    margin-bottom: var(--space-8);
    border: 1px solid var(--color-border);
}

.rank-badge {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-bold);
    color: var(--color-btn-primary-text);
}

.rank-1 { background: #ffd700; }
.rank-2 { background: #c0c0c0; }
.rank-3 { background: #cd7f32; }
.rank-other { background: var(--color-secondary); color: var(--color-text); }

.video-container {
    margin-top: var(--space-20);
    text-align: center;
}

.video-container iframe {
    width: 100%;
    max-width: 560px;
    height: 315px;
    border-radius: var(--radius-base);
    border: none;
}

.demo-credentials {
    background: var(--color-bg-6);
    padding: var(--space-16);
    border-radius: var(--radius-base);
    margin-bottom: var(--space-16);
    border: 1px solid var(--color-warning);
}

.demo-credentials h4 {
    color: var(--color-warning);
    margin-bottom: var(--space-8);
}

.process-flow {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: var(--space-20) 0;
    flex-wrap: wrap;
    gap: var(--space-16);
}

.process-step {
    text-align: center;
    flex: 1;
    min-width: 120px;
}

.process-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto var(--space-8);
    font-size: var(--font-size-xl);
}

.process-arrow {
    color: var(--color-primary);
    font-size: var(--font-size-2xl);
    margin: 0 var(--space-8);
}

@media (max-width: 768px) {
    .student-nav-tabs {
        flex-direction: column;
    }
    
    .student-nav-tab {
        text-align: center;
    }
    
    .report-card {
        padding: var(--space-16);
        margin: 0 var(--space-8);
    }
    
    .report-header {
        flex-direction: column;
        text-align: center;
    }
    
    .student-info-grid {
        grid-template-columns: 1fr;
    }
    
    .co-scholastic-grid {
        grid-template-columns: 1fr;
    }
    
    .signatures-section {
        flex-direction: column;
        gap: var(--space-20);
    }
    
    .download-options {
        grid-template-columns: 1fr;
    }
    
    .grade-legend {
        flex-direction: column;
        align-items: center;
    }
    
    .info-row {
        flex-direction: column;
        gap: var(--space-16);
    }
    .dashboard-content {
        padding: var(--space-16);
    }
    
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .exam-selection,
    .subject-selection {
        grid-template-columns: 1fr;
    }
    
    .calculator-grid {
        grid-template-columns: 1fr;
    }
    
    .results-overview {
        grid-template-columns: 1fr;
    }
    
    .quick-actions {
        flex-direction: column;
    }
    
    .marks-grid {
        grid-template-columns: 1fr;
    }
    
    .results-summary {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .performance-analysis {
        grid-template-columns: 1fr;
    }
    
    .teacher-tabs {
        flex-wrap: wrap;
    }
    
    .process-flow {
        flex-direction: column;
    }
    
    .process-arrow {
        transform: rotate(90deg);
    }
}

/* Remove original header styles - not needed for school system */

/* Hero Section */
.hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    background: linear-gradient(135deg, var(--color-bg-1) 0%, var(--color-bg-3) 100%);
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><defs><pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse"><path d="M 50 0 L 0 0 0 50" fill="none" stroke="%2333808D" stroke-width="0.5" opacity="0.1"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grid)"/></svg>') center/cover;
    opacity: 0.3;
}

.hero-content {
    position: relative;
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
}

.hero h1 {
    font-size: 3.5rem;
    font-weight: var(--font-weight-bold);
    margin-bottom: var(--space-24);
    opacity: 0;
    animation: fadeInUp 1s ease-out 0.3s forwards;
}

.hero p {
    font-size: var(--font-size-xl);
    color: var(--color-text-secondary);
    margin-bottom: var(--space-32);
    opacity: 0;
    animation: fadeInUp 1s ease-out 0.6s forwards;
}

.hero-buttons {
    display: flex;
    gap: var(--space-16);
    justify-content: center;
    flex-wrap: wrap;
    opacity: 0;
    animation: fadeInUp 1s ease-out 0.9s forwards;
}

.btn {
    padding: var(--space-16) var(--space-32);
    border: none;
    border-radius: var(--radius-base);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all var(--duration-normal) var(--ease-standard);
    position: relative;
    overflow: hidden;
}

.btn-primary {
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
}

.btn-primary:hover {
    background: var(--color-primary-hover);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.btn-secondary {
    background: transparent;
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
}

.btn-secondary:hover {
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
    transform: translateY(-2px);
}

/* Section Styles */
section {
    padding: 80px 0;
}

.section-title {
    text-align: center;
    font-size: 2.5rem;
    font-weight: var(--font-weight-bold);
    margin-bottom: var(--space-16);
}

.section-subtitle {
    text-align: center;
    font-size: var(--font-size-xl);
    color: var(--color-text-secondary);
    margin-bottom: 60px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

/* About Section */
.about {
    background: var(--color-surface);
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-32);
    margin-top: 60px;
}

.feature-card {
    background: var(--color-background);
    padding: var(--space-32);
    border-radius: var(--radius-lg);
    text-align: center;
    border: 1px solid var(--color-card-border);
    transition: transform var(--duration-normal) var(--ease-standard), box-shadow var(--duration-normal) var(--ease-standard);
}

.feature-card:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-lg);
}

.feature-icon {
    font-size: 3rem;
    margin-bottom: var(--space-16);
}

.feature-card h3 {
    font-size: var(--font-size-xl);
    margin-bottom: var(--space-12);
}

.feature-card p {
    color: var(--color-text-secondary);
    line-height: 1.6;
}

/* Services Section */
.services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-32);
}

.service-card {
    background: var(--color-surface);
    padding: var(--space-32);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-card-border);
    transition: all var(--duration-normal) var(--ease-standard);
    position: relative;
    overflow: hidden;
}

.service-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 3px;
    background: var(--color-primary);
    transition: left var(--duration-normal) var(--ease-standard);
}

.service-card:hover::before {
    left: 0;
}

.service-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg);
}

.service-icon {
    font-size: 2.5rem;
    color: var(--color-primary);
    margin-bottom: var(--space-16);
}

.service-card h3 {
    font-size: var(--font-size-xl);
    margin-bottom: var(--space-12);
}

.service-card p {
    color: var(--color-text-secondary);
    line-height: 1.6;
}

/* Portfolio Section */
.portfolio {
    background: var(--color-surface);
}

.portfolio-filters {
    display: flex;
    justify-content: center;
    gap: var(--space-16);
    margin-bottom: 40px;
    flex-wrap: wrap;
}

.filter-btn {
    padding: var(--space-8) var(--space-20);
    background: transparent;
    border: 2px solid var(--color-border);
    border-radius: var(--radius-full);
    color: var(--color-text);
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-standard);
}

.filter-btn.active,
.filter-btn:hover {
    background: var(--color-primary);
    border-color: var(--color-primary);
    color: var(--color-btn-primary-text);
}

.portfolio-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-24);
}

.portfolio-item {
    background: var(--color-background);
    border-radius: var(--radius-lg);
    overflow: hidden;
    border: 1px solid var(--color-card-border);
    transition: all var(--duration-normal) var(--ease-standard);
    opacity: 1;
    transform: scale(1);
}

.portfolio-item.hidden {
    opacity: 0;
    transform: scale(0.8);
    pointer-events: none;
}

.portfolio-item:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: var(--shadow-lg);
}

.portfolio-image {
    height: 200px;
    background: var(--color-bg-1);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-text-secondary);
    font-style: italic;
    position: relative;
    overflow: hidden;
}

.portfolio-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, var(--color-primary), var(--color-teal-300));
    opacity: 0.1;
}

.portfolio-content {
    padding: var(--space-20);
}

.portfolio-content h3 {
    font-size: var(--font-size-xl);
    margin-bottom: var(--space-8);
}

.portfolio-category {
    color: var(--color-primary);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Testimonials Section */
.testimonials-container {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
}

.testimonial {
    background: var(--color-surface);
    padding: var(--space-32);
    border-radius: var(--radius-lg);
    text-align: center;
    border: 1px solid var(--color-card-border);
    margin: 0 var(--space-16);
    display: none;
}

.testimonial.active {
    display: block;
    animation: fadeIn 0.5s ease-in-out;
}

.testimonial-text {
    font-size: var(--font-size-xl);
    line-height: 1.6;
    margin-bottom: var(--space-24);
    font-style: italic;
}

.testimonial-author {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-16);
}

.author-info h4 {
    font-size: var(--font-size-lg);
    margin-bottom: var(--space-4);
}

.author-info p {
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
    margin: 0;
}

.rating {
    color: #fbbf24;
    margin-bottom: var(--space-16);
}

.testimonial-nav {
    display: flex;
    justify-content: center;
    gap: var(--space-16);
    margin-top: var(--space-32);
}

.nav-btn {
    background: var(--color-secondary);
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    font-size: var(--font-size-xl);
    color: var(--color-text);
    transition: all var(--duration-fast) var(--ease-standard);
}

.nav-btn:hover {
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
}

/* Contact Section */
.contact {
    background: var(--color-surface);
}

.contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: start;
}

.contact-info {
    background: var(--color-background);
    padding: var(--space-32);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-card-border);
}

.contact-item {
    display: flex;
    align-items: center;
    gap: var(--space-16);
    margin-bottom: var(--space-24);
}

.contact-item i {
    color: var(--color-primary);
    font-size: var(--font-size-xl);
    width: 24px;
}

.contact-form {
    background: var(--color-background);
    padding: var(--space-32);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-card-border);
}

.form-group {
    margin-bottom: var(--space-20);
}

.form-group label {
    display: block;
    margin-bottom: var(--space-8);
    font-weight: var(--font-weight-medium);
    color: var(--color-text);
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-surface);
    color: var(--color-text);
    transition: border-color var(--duration-fast) var(--ease-standard);
}

.form-group input:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--color-primary);
}

.form-group textarea {
    resize: vertical;
    min-height: 120px;
}

.form-message {
    margin-top: var(--space-16);
    padding: var(--space-12);
    border-radius: var(--radius-base);
    display: none;
}

.form-message.success {
    background: var(--color-bg-3);
    color: var(--color-success);
    border: 1px solid var(--color-success);
}

.form-message.error {
    background: var(--color-bg-4);
    color: var(--color-error);
    border: 1px solid var(--color-error);
}

/* Footer */
footer {
    background: var(--color-charcoal-800);
    color: var(--color-gray-200);
    padding: 60px 0 var(--space-24);
}

.footer-content {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1fr;
    gap: var(--space-32);
    margin-bottom: var(--space-32);
}

.footer-section h3 {
    color: var(--color-teal-300);
    margin-bottom: var(--space-16);
}

.footer-section p {
    line-height: 1.6;
    margin-bottom: var(--space-16);
}

.footer-section ul {
    list-style: none;
}

.footer-section ul li {
    margin-bottom: var(--space-8);
}

.footer-section ul li a {
    color: var(--color-gray-300);
    text-decoration: none;
    transition: color var(--duration-fast) var(--ease-standard);
}

.footer-section ul li a:hover {
    color: var(--color-teal-300);
}

.social-links {
    display: flex;
    gap: var(--space-16);
}

.social-links a {
    display: inline-block;
    width: 40px;
    height: 40px;
    background: rgba(var(--color-teal-300-rgb), 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-teal-300);
    text-decoration: none;
    transition: all var(--duration-fast) var(--ease-standard);
}

.social-links a:hover {
    background: var(--color-teal-300);
    color: var(--color-charcoal-800);
}

.newsletter {
    margin-top: var(--space-16);
}

.newsletter-form {
    display: flex;
    gap: var(--space-8);
    margin-top: var(--space-8);
}

.newsletter-form input {
    flex: 1;
    padding: var(--space-8) var(--space-12);
    border: 1px solid var(--color-gray-400);
    border-radius: var(--radius-base);
    background: var(--color-charcoal-700);
    color: var(--color-gray-200);
}

.newsletter-form button {
    padding: var(--space-8) var(--space-16);
    background: var(--color-teal-300);
    color: var(--color-charcoal-800);
    border: none;
    border-radius: var(--radius-base);
    cursor: pointer;
    font-weight: var(--font-weight-medium);
    transition: background var(--duration-fast) var(--ease-standard);
}

.newsletter-form button:hover {
    background: var(--color-teal-400);
}

.footer-bottom {
    text-align: center;
    padding-top: var(--space-24);
    border-top: 1px solid rgba(var(--color-gray-400-rgb), 0.2);
    color: var(--color-gray-400);
}

/* Scroll to Top Button */
.scroll-to-top {
    position: fixed;
    bottom: var(--space-24);
    right: var(--space-24);
    width: 50px;
    height: 50px;
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: var(--font-size-xl);
    opacity: 0;
    visibility: hidden;
    transition: all var(--duration-normal) var(--ease-standard);
    z-index: 1000;
}

.scroll-to-top.visible {
    opacity: 1;
    visibility: visible;
}

.scroll-to-top:hover {
    background: var(--color-primary-hover);
    transform: translateY(-2px);
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* New component styles */
.login-subtabs {
    display: flex;
    margin-bottom: var(--space-16);
    border-radius: var(--radius-base);
    overflow: hidden;
    border: 1px solid var(--color-border);
}

.login-subtab {
    flex: 1;
    padding: var(--space-8);
    background: var(--color-secondary);
    border: none;
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-standard);
    color: var(--color-text);
    font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm);
}

.login-subtab.active {
    background: var(--color-primary);
    color: var(--color-btn-primary-text);
}

.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-20);
    margin-bottom: var(--space-32);
}

.stat-card {
    background: var(--color-bg-1);
    padding: var(--space-20);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    display: flex;
    align-items: center;
    gap: var(--space-16);
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: var(--color-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-btn-primary-text);
    font-size: var(--font-size-xl);
}

.stat-content h3 {
    font-size: var(--font-size-3xl);
    margin: 0;
    color: var(--color-primary);
}

.stat-content p {
    margin: 0;
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
}

.quick-actions {
    display: flex;
    gap: var(--space-16);
    flex-wrap: wrap;
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-20);
}

.form-actions {
    display: flex;
    gap: var(--space-16);
    justify-content: center;
    margin-top: var(--space-24);
}

.marks-entry-wizard {
    max-width: 800px;
    margin: 0 auto;
}

.wizard-step {
    display: none;
    padding: var(--space-24);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    background: var(--color-surface);
}

.wizard-step.active {
    display: block;
}

.wizard-step h3 {
    margin-bottom: var(--space-20);
    color: var(--color-primary);
    text-align: center;
}

.exam-selection,
.subject-selection {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-16);
}

.exam-btn,
.subject-btn {
    background: var(--color-bg-2);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-lg);
    padding: var(--space-20);
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-standard);
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-8);
}

.exam-btn:hover,
.subject-btn:hover {
    border-color: var(--color-primary);
    background: var(--color-bg-1);
    transform: translateY(-2px);
}

.exam-btn i,
.subject-btn i {
    font-size: var(--font-size-2xl);
    color: var(--color-primary);
}

.exam-btn span,
.subject-btn span {
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
}

.exam-btn small,
.subject-btn small {
    color: var(--color-text-secondary);
    font-size: var(--font-size-xs);
}

.student-search {
    margin-bottom: var(--space-20);
}

.student-search input {
    width: 100%;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-background);
    color: var(--color-text);
}

.student-list {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-base);
}

.student-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-16);
    border-bottom: 1px solid var(--color-border);
    background: var(--color-background);
}

.student-item:hover {
    background: var(--color-bg-1);
}

.student-info h4 {
    margin: 0 0 var(--space-4) 0;
    color: var(--color-text);
}

.student-info p {
    margin: 0;
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
}

.selected-info {
    background: var(--color-bg-3);
    padding: var(--space-16);
    border-radius: var(--radius-base);
    margin-bottom: var(--space-20);
    border: 1px solid var(--color-success);
}

.selected-info p {
    margin: var(--space-4) 0;
    color: var(--color-text);
}

.marks-form {
    background: var(--color-background);
    padding: var(--space-20);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
}

.marks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-16);
    margin-bottom: var(--space-16);
}

.marks-input-group {
    margin-bottom: var(--space-16);
}

.marks-input-group label {
    display: block;
    margin-bottom: var(--space-8);
    font-weight: var(--font-weight-medium);
    color: var(--color-text);
}

.marks-input-group input {
    width: 100%;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-surface);
    color: var(--color-text);
    transition: border-color var(--duration-fast) var(--ease-standard);
}

.marks-input-group input:focus {
    outline: none;
    border-color: var(--color-primary);
}

.science-marks h4 {
    color: var(--color-primary);
    margin: var(--space-16) 0 var(--space-8) 0;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--space-8);
}

.science-total {
    background: var(--color-bg-6) !important;
    color: var(--color-text) !important;
}

.reports-controls {
    margin-bottom: var(--space-24);
}

.student-selector label {
    display: block;
    margin-bottom: var(--space-8);
    font-weight: var(--font-weight-medium);
    color: var(--color-text);
}

.student-selector select {
    width: 100%;
    max-width: 400px;
    padding: var(--space-12);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-base);
    background: var(--color-surface);
    color: var(--color-text);
}

.student-report {
    background: var(--color-surface);
    padding: var(--space-24);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
}

.report-header {
    text-align: center;
    margin-bottom: var(--space-24);
    padding-bottom: var(--space-16);
    border-bottom: 1px solid var(--color-border);
}

.report-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--space-20);
}

.report-table th,
.report-table td {
    padding: var(--space-12);
    text-align: center;
    border: 1px solid var(--color-border);
}

.report-table th {
    background: var(--color-secondary);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
}

.report-summary {
    text-align: center;
    padding: var(--space-16);
    background: var(--color-bg-1);
    border-radius: var(--radius-base);
    border: 1px solid var(--color-border);
}

.no-marks,
.no-results {
    text-align: center;
    padding: var(--space-32);
    color: var(--color-text-secondary);
}

.results-table-container {
    overflow-x: auto;
    margin-bottom: var(--space-24);
}

.results-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--space-20);
}

.results-table th,
.results-table td {
    padding: var(--space-12);
    text-align: center;
    border: 1px solid var(--color-border);
}

.results-table th {
    background: var(--color-secondary);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
}

.summary-card {
    background: var(--color-bg-1);
    padding: var(--space-20);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    text-align: center;
}

.calculator-disclaimer {
    background: var(--color-bg-6);
    padding: var(--space-16);
    border-radius: var(--radius-base);
    margin-bottom: var(--space-20);
    border: 1px solid var(--color-warning);
    text-align: center;
}

.calculator-disclaimer p {
    margin: var(--space-8) 0;
    color: var(--color-text);
}

.calculator-disclaimer p:first-child {
    font-weight: var(--font-weight-bold);
    color: var(--color-warning);
}

.calculator-form {
    background: var(--color-surface);
    padding: var(--space-24);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    margin-bottom: var(--space-24);
}

.calculator-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-20);
    margin-bottom: var(--space-24);
}

.subject-calculator {
    background: var(--color-background);
    padding: var(--space-16);
    border-radius: var(--radius-base);
    border: 1px solid var(--color-border);
}

.subject-calculator h4 {
    margin-bottom: var(--space-12);
    color: var(--color-primary);
    text-align: center;
    font-size: var(--font-size-lg);
}

.calc-inputs {
    display: flex;
    flex-direction: column;
    gap: var(--space-8);
}

.calc-inputs input {
    padding: var(--space-10);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-base);
    font-size: var(--font-size-sm);
    background: var(--color-surface);
    color: var(--color-text);
}

.calc-inputs input:focus {
    outline: none;
    border-color: var(--color-primary);
}

.calculator-actions {
    display: flex;
    gap: var(--space-16);
    justify-content: center;
}

.calculator-results {
    background: var(--color-surface);
    padding: var(--space-24);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    margin-top: var(--space-24);
}

.calculator-results-content h3 {
    text-align: center;
    margin-bottom: var(--space-20);
    color: var(--color-primary);
}

.results-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--space-16);
    margin-bottom: var(--space-24);
}

.overview-item {
    background: var(--color-bg-1);
    padding: var(--space-16);
    border-radius: var(--radius-base);
    text-align: center;
    border: 1px solid var(--color-border);
}

.overview-item .label {
    display: block;
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    margin-bottom: var(--space-4);
}

.overview-item .value {
    display: block;
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--color-text);
}

.calc-results-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--space-20);
}

.calc-results-table th,
.calc-results-table td {
    padding: var(--space-10);
    text-align: center;
    border: 1px solid var(--color-border);
    font-size: var(--font-size-sm);
}

.calc-results-table th {
    background: var(--color-secondary);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
}

.predictions {
    margin-top: var(--space-20);
    padding: var(--space-16);
    background: var(--color-bg-6);
    border-radius: var(--radius-base);
    border: 1px solid var(--color-warning);
}

.predictions h4 {
    margin-bottom: var(--space-12);
    color: var(--color-warning);
}

.prediction-item {
    display: flex;
    align-items: center;
    gap: var(--space-8);
    margin-bottom: var(--space-8);
    color: var(--color-text);
}

.prediction-item.warning {
    color: var(--color-error);
}

.prediction-item i {
    color: var(--color-warning);
}

.prediction-item p {
    margin: 0;
}

/* Password strength and validation styles */
.password-strength {
    margin-top: var(--space-8);
}

.strength-bar {
    height: 4px;
    width: 100%;
    background: var(--color-border);
    border-radius: var(--radius-sm);
    margin-bottom: var(--space-4);
    transition: all var(--duration-fast) var(--ease-standard);
}

.strength-bar.strength-weak {
    background: linear-gradient(to right, var(--color-error) 33%, var(--color-border) 33%);
}

.strength-bar.strength-medium {
    background: linear-gradient(to right, var(--color-warning) 66%, var(--color-border) 66%);
}

.strength-bar.strength-strong {
    background: var(--color-success);
}

.strength-text {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
}

.strength-text.weak {
    color: var(--color-error);
}

.strength-text.medium {
    color: var(--color-warning);
}

.strength-text.strong {
    color: var(--color-success);
}

.password-match {
    margin-top: var(--space-4);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
}

.match-success {
    color: var(--color-success);
}

.match-error {
    color: var(--color-error);
}

.requirements-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-4);
}

.requirement {
    font-size: var(--font-size-sm);
    color: var(--color-error);
    display: flex;
    align-items: center;
    gap: var(--space-8);
}

.requirement.met {
    color: var(--color-success);
}

.requirement i {
    width: 16px;
}

.password-input-group {
    position: relative;
    display: flex;
    align-items: center;
}

.password-toggle {
    position: absolute;
    right: var(--space-12);
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-secondary);
    padding: var(--space-4);
    border-radius: var(--radius-sm);
    transition: color var(--duration-fast) var(--ease-standard);
}

.password-toggle:hover {
    color: var(--color-text);
}

/* Modal overlay styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-32);
    max-width: 500px;
    width: 90%;
    max-height: 90%;
    overflow-y: auto;
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-lg);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-24);
    padding-bottom: var(--space-16);
    border-bottom: 1px solid var(--color-border);
}

.modal-close {
    background: none;
    border: none;
    font-size: var(--font-size-xl);
    cursor: pointer;
    color: var(--color-text-secondary);
    padding: var(--space-4);
    border-radius: var(--radius-sm);
    transition: all var(--duration-fast) var(--ease-standard);
}

.modal-close:hover {
    color: var(--color-error);
    background: var(--color-bg-4);
}

/* Mobile Styles */
@media (max-width: 768px) {
    .mobile-menu-toggle {
        display: block;
    }

    .nav-links {
        position: fixed;
        top: 100%;
        left: 0;
        width: 100%;
        background: var(--color-surface);
        flex-direction: column;
        padding: var(--space-20);
        gap: var(--space-20);
        transition: top var(--duration-normal) var(--ease-standard);
        box-shadow: var(--shadow-lg);
    }

    .nav-links.active {
        top: 100%;
    }

    .hero h1 {
        font-size: 2.5rem;
    }

    .hero p {
        font-size: var(--font-size-lg);
    }

    .hero-buttons {
        flex-direction: column;
        align-items: center;
    }

    .contact-content {
        grid-template-columns: 1fr;
        gap: var(--space-32);
    }

    .footer-content {
        grid-template-columns: 1fr;
        gap: var(--space-24);
    }

    .newsletter-form {
        flex-direction: column;
    }

    .container {
        padding: 0 var(--space-16);
    }

    section {
        padding: 60px 0;
    }
}

@media (max-width: 480px) {
    .hero h1 {
        font-size: 2rem;
    }

    .section-title {
        font-size: 2rem;
    }

    .btn {
        padding: var(--space-12) var(--space-24);
        font-size: var(--font-size-base);
    }
}
    </style>
</head>
<body>
    <!-- Login Page -->
    <div id="loginPage" class="login-container" style="display: flex;">
        <div class="login-card">
            <h1 style="color: var(--color-primary); margin-bottom: var(--space-24); font-size: var(--font-size-3xl);">
                <i class="fas fa-graduation-cap"></i> School Result Management
            </h1>
            <h2 style="margin-bottom: var(--space-32); color: var(--color-text-secondary); font-size: var(--font-size-lg);">Class 9A - Academic Session 2025-26 (115 Students Registered)</h2>
            

            
            <div class="login-tabs">
                <button class="login-tab active" onclick="switchTab(&#39;student&#39;)">Student Login</button>
                <button class="login-tab" onclick="switchTab(&#39;teacher&#39;)">Teacher Login</button>
            </div>
            
            <!-- Student Login Tabs -->
            <div class="login-subtabs" style="display: flex;">
                <button class="login-subtab active" onclick="switchStudentLoginTab(&#39;registration&#39;)">Login with Registration No</button>
                <button class="login-subtab" onclick="switchStudentLoginTab(&#39;username&#39;)">Login with Username</button>
            </div>
            
            <!-- Registration Number Login Form -->
            <form id="registrationLogin" class="login-form active">
                <div class="form-group">
                    <label for="registrationNo">Registration Number</label>
                    <input type="text" id="registrationNo" placeholder="Enter registration number" required="">
                </div>
                <div class="form-group">
                    <label for="dobLogin">Date of Birth (YYYY-MM-DD)</label>
                    <input type="date" id="dobLogin" required="">
                </div>
                <button type="submit" class="btn btn-primary btn--full-width">
                    <i class="fas fa-sign-in-alt"></i> Login with Registration
                </button>
            </form>
            
            <!-- Username Login Form -->
            <form id="usernameLogin" class="login-form">
                <div class="form-group">
                    <label for="studentUsername">Username</label>
                    <input type="text" id="studentUsername" placeholder="Enter username" required="">
                </div>
                <div class="form-group">
                    <label for="studentPassword">Password</label>
                    <input type="password" id="studentPassword" placeholder="Enter password" required="">
                </div>
                <button type="submit" class="btn btn-primary btn--full-width">
                    <i class="fas fa-sign-in-alt"></i> Login with Username
                </button>
            </form>
            
            <!-- Teacher Login Form -->
            <form id="teacherLogin" class="login-form">
                <div class="form-group">
                    <label for="teacherId">Teacher ID</label>
                    <input type="text" id="teacherId" placeholder="Enter teacher ID" required="">
                </div>
                <div class="form-group">
                    <label for="teacherPassword">Password</label>
                    <input type="password" id="teacherPassword" placeholder="Enter password" required="">
                </div>
                <button type="submit" class="btn btn-primary btn--full-width">
                    <i class="fas fa-chalkboard-teacher"></i> Login as Teacher
                </button>
            </form>
        </div>
    </div>

    <!-- Student Dashboard -->
    <div id="studentDashboard" class="dashboard">
        <div class="dashboard-header">
            <div class="container">
                <div class="dashboard-nav">
                    <div class="user-info">
                        <div class="user-avatar" id="studentAvatar">S</div>
                        <div>
                            <h3 id="studentName">Student Name</h3>
                            <p id="studentDetails">Roll: 901 | Class: 9A</p>
                        </div>
                    </div>
                    <button class="btn btn-primary" onclick="showChangePasswordModal()" style="margin-right: var(--space-8);">
                        <i class="fas fa-key"></i> Change Password
                    </button>
                    <button class="btn btn-secondary" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            </div>
        </div>
        
        <div class="dashboard-content">
            <div class="container">
                <!-- Navigation Tabs -->
                <div class="student-nav-tabs">
                    <button class="student-nav-tab active" onclick="switchStudentTab(&#39;results&#39;)">📊 Official Results</button>
                    <button class="student-nav-tab" onclick="switchStudentTab(&#39;calculator&#39;)">🧮 Sample Calculator</button>
                    <button class="student-nav-tab" onclick="switchStudentTab(&#39;charts&#39;)">📈 Progress Charts</button>
                    <button class="student-nav-tab" onclick="switchStudentTab(&#39;download&#39;)">💾 Download Report</button>
                </div>

                <!-- Official Results Tab Content -->
                <div id="resultsTab" class="student-tab-content active">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-graduation-cap"></i> Official Results</h2>
                        <div id="officialResultsContent">
                            <!-- Official results will be populated here by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Sample Calculator Tab -->
                <div id="calculatorTab" class="student-tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-calculator"></i> Sample Marks Calculator</h2>
                        
                        <div class="calculator-disclaimer">
                            <p><strong>DISCLAIMER: This is a practice calculator only</strong></p>
                            <p>These calculations are NOT your official results. Use this tool to practice and estimate your performance.</p>
                            <p>Official results will be published by your teacher in the "Official Results" section.</p>
                        </div>
                        
                        <div class="calculator-form">
                            <h3>Enter Your Practice Marks (Optional - Leave blank if not taken)</h3>
                            
                            <div class="calculator-grid">
                                <!-- English Calculator -->
                                <div class="subject-calculator">
                                    <h4>English</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="eng_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="eng_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="eng_hy_desc" placeholder="HY Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="eng_hy_omr" placeholder="HY OMR (0-45)" min="0" max="45">
                                        <input type="number" id="eng_hy_int" placeholder="HY Internal (0-10)" min="0" max="10">
                                        <input type="number" id="eng_ann_desc" placeholder="Annual Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="eng_ann_omr" placeholder="Annual OMR (0-45)" min="0" max="45">
                                        <input type="number" id="eng_ann_int" placeholder="Annual Internal (0-10)" min="0" max="10">
                                    </div>
                                </div>
                                
                                <!-- Mathematics Calculator -->
                                <div class="subject-calculator">
                                    <h4>Mathematics</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="math_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="math_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="math_hy_desc" placeholder="HY Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="math_hy_omr" placeholder="HY OMR (0-45)" min="0" max="45">
                                        <input type="number" id="math_hy_int" placeholder="HY Internal (0-10)" min="0" max="10">
                                        <input type="number" id="math_ann_desc" placeholder="Annual Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="math_ann_omr" placeholder="Annual OMR (0-45)" min="0" max="45">
                                        <input type="number" id="math_ann_int" placeholder="Annual Internal (0-10)" min="0" max="10">
                                    </div>
                                </div>
                                
                                <!-- Social Calculator -->
                                <div class="subject-calculator">
                                    <h4>Social</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="social_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="social_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="social_hy_desc" placeholder="HY Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="social_hy_omr" placeholder="HY OMR (0-45)" min="0" max="45">
                                        <input type="number" id="social_hy_int" placeholder="HY Internal (0-10)" min="0" max="10">
                                        <input type="number" id="social_ann_desc" placeholder="Annual Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="social_ann_omr" placeholder="Annual OMR (0-45)" min="0" max="45">
                                        <input type="number" id="social_ann_int" placeholder="Annual Internal (0-10)" min="0" max="10">
                                    </div>
                                </div>
                                
                                <!-- Science Calculator -->
                                <div class="subject-calculator">
                                    <h4>Science (Combined)</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="science_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="science_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="science_hy_desc" placeholder="HY Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="science_hy_omr" placeholder="HY OMR (0-45)" min="0" max="45">
                                        <input type="number" id="science_hy_int" placeholder="HY Internal (0-10)" min="0" max="10">
                                        <input type="number" id="science_ann_desc" placeholder="Annual Descriptive (0-45)" min="0" max="45">
                                        <input type="number" id="science_ann_omr" placeholder="Annual OMR (0-45)" min="0" max="45">
                                        <input type="number" id="science_ann_int" placeholder="Annual Internal (0-10)" min="0" max="10">
                                    </div>
                                </div>
                                
                                <!-- MIL Calculator -->
                                <div class="subject-calculator">
                                    <h4 id="milSubjectName">MIL</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="mil_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="mil_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="mil_hy_desc" placeholder="HY Descriptive (0-100)" min="0" max="100">
                                        <input type="number" id="mil_ann_desc" placeholder="Annual Descriptive (0-100)" min="0" max="100">
                                    </div>
                                </div>
                                
                                <!-- Elective Calculator -->
                                <div class="subject-calculator">
                                    <h4 id="electiveSubjectName">Elective</h4>
                                    <div class="calc-inputs">
                                        <input type="number" id="elective_ut1" placeholder="Unit Test 1 (0-50)" min="0" max="50">
                                        <input type="number" id="elective_ut2" placeholder="Unit Test 2 (0-50)" min="0" max="50">
                                        <input type="number" id="elective_hy_desc" placeholder="HY Descriptive (0-70)" min="0" max="70">
                                        <input type="number" id="elective_hy_int" placeholder="HY Internal (0-30)" min="0" max="30">
                                        <input type="number" id="elective_ann_desc" placeholder="Annual Descriptive (0-70)" min="0" max="70">
                                        <input type="number" id="elective_ann_int" placeholder="Annual Internal (0-30)" min="0" max="30">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="calculator-actions">
                                <button class="btn btn-primary" onclick="calculateSampleResults()">                                    <i class="fas fa-calculator"></i> CALCULATE RESULTS
                                </button>
                                <button class="btn btn-secondary" onclick="clearCalculator()">
                                    <i class="fas fa-eraser"></i> CLEAR ALL
                                </button>
                            </div>
                        </div>
                        
                        <div id="calculatorResults" class="calculator-results" style="display: none;">
                            <div class="calculator-results-content">
                                <h3>Your Sample Calculation Results</h3>
                                
                                <div class="results-overview">
                                    <div class="overview-item">
                                        <span class="label">Current %</span>
                                        <span class="value" id="calcCurrentPercentage">0%</span>
                                    </div>
                                    <div class="overview-item">
                                        <span class="label">Status</span>
                                        <span class="value" id="calcCurrentStatus">-</span>
                                    </div>
                                    <div class="overview-item">
                                        <span class="label">Completed Exams</span>
                                        <span class="value" id="calcCompletedExams">0/4</span>
                                    </div>
                                </div>
                                
                                <table class="calc-results-table">
                                    <thead>
                                        <tr>
                                            <th>Subject</th>
                                            <th>UT1 (10%)</th>
                                            <th>HY (30%)</th>
                                            <th>UT2 (10%)</th>
                                            <th>Annual (50%)</th>
                                            <th>Total</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody id="calcResultsTableBody">
                                        <!-- Results will be populated here -->
                                    </tbody>
                                </table>
                                
                                <div id="predictionSection" class="predictions">
                                    <h4><i class="fas fa-crystal-ball"></i> Predictions &amp; Recommendations</h4>
                                    <div id="predictionContent">
                                        <!-- Predictions will be populated here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Sample Calculator Functions -->
                    <script>
                        function calculateSampleResults() {
                            console.log('Calculating sample results...');
                            
                            // Collect all input values
                            const inputs = {
                                english: {
                                    ut1: parseFloat(document.getElementById('eng_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('eng_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('eng_hy_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('eng_hy_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('eng_hy_int').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('eng_ann_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('eng_ann_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('eng_ann_int').value) || 0
                                    }
                                },
                                mathematics: {
                                    ut1: parseFloat(document.getElementById('math_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('math_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('math_hy_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('math_hy_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('math_hy_int').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('math_ann_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('math_ann_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('math_ann_int').value) || 0
                                    }
                                },
                                social: {
                                    ut1: parseFloat(document.getElementById('social_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('social_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('social_hy_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('social_hy_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('social_hy_int').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('social_ann_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('social_ann_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('social_ann_int').value) || 0
                                    }
                                },
                                science: {
                                    ut1: parseFloat(document.getElementById('science_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('science_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('science_hy_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('science_hy_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('science_hy_int').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('science_ann_desc').value) || 0,
                                        omr: parseFloat(document.getElementById('science_ann_omr').value) || 0,
                                        internal: parseFloat(document.getElementById('science_ann_int').value) || 0
                                    }
                                },
                                mil: {
                                    ut1: parseFloat(document.getElementById('mil_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('mil_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('mil_hy_desc').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('mil_ann_desc').value) || 0
                                    }
                                },
                                elective: {
                                    ut1: parseFloat(document.getElementById('elective_ut1').value) || 0,
                                    ut2: parseFloat(document.getElementById('elective_ut2').value) || 0,
                                    hy: {
                                        descriptive: parseFloat(document.getElementById('elective_hy_desc').value) || 0,
                                        internal: parseFloat(document.getElementById('elective_hy_int').value) || 0
                                    },
                                    annual: {
                                        descriptive: parseFloat(document.getElementById('elective_ann_desc').value) || 0,
                                        internal: parseFloat(document.getElementById('elective_ann_int').value) || 0
                                    }
                                }
                            };
                            
                            // Calculate weighted marks for each subject
                            const results = {};
                            let totalWeightedMarks = 0;
                            let completedExams = 0;
                            let totalPossibleExams = 4; // UT1, HY, UT2, Annual
                            
                            Object.keys(inputs).forEach(subject => {
                                const subjectData = inputs[subject];
                                
                                // Calculate weighted contribution
                                let ut1Contribution = 0;
                                let ut2Contribution = 0;
                                let hyContribution = 0;
                                let annualContribution = 0;
                                
                                // UT1 and UT2 (10% each)
                                if (subjectData.ut1 > 0) {
                                    ut1Contribution = (subjectData.ut1 / 50) * 10;
                                }
                                if (subjectData.ut2 > 0) {
                                    ut2Contribution = (subjectData.ut2 / 50) * 10;
                                }
                                
                                // Half Yearly (30%)
                                if (subject === 'mil') {
                                    if (subjectData.hy.descriptive > 0) {
                                        hyContribution = (subjectData.hy.descriptive / 100) * 30;
                                    }
                                } else if (subject === 'elective') {
                                    const hyTotal = subjectData.hy.descriptive + subjectData.hy.internal;
                                    if (hyTotal > 0) {
                                        hyContribution = (hyTotal / 100) * 30;
                                    }
                                } else {
                                    const hyTotal = subjectData.hy.descriptive + subjectData.hy.omr + subjectData.hy.internal;
                                    if (hyTotal > 0) {
                                        hyContribution = (hyTotal / 100) * 30;
                                    }
                                }
                                
                                // Annual (50%)
                                if (subject === 'mil') {
                                    if (subjectData.annual.descriptive > 0) {
                                        annualContribution = (subjectData.annual.descriptive / 100) * 50;
                                    }
                                } else if (subject === 'elective') {
                                    const annualTotal = subjectData.annual.descriptive + subjectData.annual.internal;
                                    if (annualTotal > 0) {
                                        annualContribution = (annualTotal / 100) * 50;
                                    }
                                } else {
                                    const annualTotal = subjectData.annual.descriptive + subjectData.annual.omr + subjectData.annual.internal;
                                    if (annualTotal > 0) {
                                        annualContribution = (annualTotal / 100) * 50;
                                    }
                                }
                                
                                const totalSubjectMarks = ut1Contribution + ut2Contribution + hyContribution + annualContribution;
                                
                                results[subject] = {
                                    ut1: ut1Contribution,
                                    ut2: ut2Contribution,
                                    hy: hyContribution,
                                    annual: annualContribution,
                                    total: totalSubjectMarks,
                                    status: totalSubjectMarks >= 30 ? 'PASS' : 'AT RISK'
                                };
                                
                                totalWeightedMarks += totalSubjectMarks;
                            });
                            
                            // Count completed exams across all subjects
                            let examCompletionCount = {
                                ut1: 0, ut2: 0, hy: 0, annual: 0
                            };
                            
                            Object.keys(inputs).forEach(subject => {
                                if (inputs[subject].ut1 > 0) examCompletionCount.ut1++;
                                if (inputs[subject].ut2 > 0) examCompletionCount.ut2++;
                                if (subject === 'mil') {
                                    if (inputs[subject].hy.descriptive > 0) examCompletionCount.hy++;
                                    if (inputs[subject].annual.descriptive > 0) examCompletionCount.annual++;
                                } else if (subject === 'elective') {
                                    if (inputs[subject].hy.descriptive + inputs[subject].hy.internal > 0) examCompletionCount.hy++;
                                    if (inputs[subject].annual.descriptive + inputs[subject].annual.internal > 0) examCompletionCount.annual++;
                                } else {
                                    if (inputs[subject].hy.descriptive + inputs[subject].hy.omr + inputs[subject].hy.internal > 0) examCompletionCount.hy++;
                                    if (inputs[subject].annual.descriptive + inputs[subject].annual.omr + inputs[subject].annual.internal > 0) examCompletionCount.annual++;
                                }
                            });
                            
                            completedExams = Object.values(examCompletionCount).filter(count => count > 0).length;
                            
                            const overallPercentage = (totalWeightedMarks / 600) * 100; // Out of 600 total marks
                            const overallStatus = overallPercentage >= 30 ? 'PASS' : 'AT RISK';
                            
                            // Display results
                            displayCalculationResults(results, overallPercentage, overallStatus, completedExams, examCompletionCount);
                        }
                        
                        function displayCalculationResults(results, overallPercentage, overallStatus, completedExams, examCompletionCount) {
                            // Show results section
                            document.getElementById('calculatorResults').style.display = 'block';
                            
                            // Update overview
                            document.getElementById('calcCurrentPercentage').textContent = overallPercentage.toFixed(1) + '%';
                            document.getElementById('calcCurrentStatus').textContent = overallStatus;
                            document.getElementById('calcCompletedExams').textContent = completedExams + '/4';
                            
                            // Update results table
                            const tableBody = document.getElementById('calcResultsTableBody');
                            tableBody.innerHTML = '';
                            
                            const subjectNames = {
                                english: 'English',
                                mathematics: 'Mathematics', 
                                social: 'Social',
                                science: 'Science (Combined)',
                                mil: currentUser?.mil_subject || 'MIL',
                                elective: currentUser?.elective_subject || 'Elective'
                            };
                            
                            Object.keys(results).forEach(subject => {
                                const subjectData = results[subject];
                                const row = document.createElement('tr');
                                
                                const statusClass = subjectData.status === 'PASS' ? 'success' : 'error';
                                
                                row.innerHTML = `
                                    <td><strong>${subjectNames[subject]}</strong></td>
                                    <td>${subjectData.ut1.toFixed(1)}</td>
                                    <td>${subjectData.hy.toFixed(1)}</td>
                                    <td>${subjectData.ut2.toFixed(1)}</td>
                                    <td>${subjectData.annual.toFixed(1)}</td>
                                    <td><strong>${subjectData.total.toFixed(1)}/100</strong></td>
                                    <td><span class="status status--${statusClass}">${subjectData.status}</span></td>
                                `;
                                
                                tableBody.appendChild(row);
                            });
                            
                            // Generate predictions
                            generatePredictions(results, overallPercentage, examCompletionCount);
                        }
                        
                        function generatePredictions(results, currentPercentage, examCompletion) {
                            const predictionContent = document.getElementById('predictionContent');
                            let predictions = [];
                            
                            // Check if student is on track to pass
                            if (currentPercentage >= 30) {
                                predictions.push({
                                    type: 'success',
                                    icon: 'fas fa-check-circle',
                                    text: `Great! You're currently on track to pass with ${currentPercentage.toFixed(1)}%`
                                });
                            } else {
                                const needed = 30 - currentPercentage;
                                predictions.push({
                                    type: 'warning',
                                    icon: 'fas fa-exclamation-triangle', 
                                    text: `You need ${needed.toFixed(1)}% more in remaining exams to reach the 30% passing threshold`
                                });
                            }
                            
                            // Check remaining exams
                            const remainingExams = [];
                            if (examCompletion.ut1 === 0) remainingExams.push('Unit Test 1');
                            if (examCompletion.ut2 === 0) remainingExams.push('Unit Test 2');
                            if (examCompletion.hy === 0) remainingExams.push('Half Yearly');
                            if (examCompletion.annual === 0) remainingExams.push('Annual');
                            
                            if (remainingExams.length > 0) {
                                predictions.push({
                                    type: 'info',
                                    icon: 'fas fa-info-circle',
                                    text: `Remaining exams: ${remainingExams.join(', ')}`
                                });
                            }
                            
                            // Subject-specific recommendations
                            Object.keys(results).forEach(subject => {
                                const subjectData = results[subject];
                                if (subjectData.total < 30) {
                                    const subjectName = {
                                        english: 'English',
                                        mathematics: 'Mathematics',
                                        social: 'Social',
                                        science: 'Science',
                                        mil: currentUser?.mil_subject || 'MIL',
                                        elective: currentUser?.elective_subject || 'Elective'
                                    }[subject];
                                    
                                    predictions.push({
                                        type: 'warning',
                                        icon: 'fas fa-exclamation-circle',
                                        text: `${subjectName} needs attention - currently at ${subjectData.total.toFixed(1)}%. Focus on improvement.`
                                    });
                                }
                            });
                            
                            // Display predictions
                            predictionContent.innerHTML = predictions.map(pred => `
                                <div class="prediction-item ${pred.type}">
                                    <i class="${pred.icon}"></i>
                                    <p>${pred.text}</p>
                                </div>
                            `).join('');
                        }
                        
                        function clearCalculator() {
                            // Clear all input fields
                            const inputs = document.querySelectorAll('.calc-inputs input');
                            inputs.forEach(input => input.value = '');
                            
                            // Hide results
                            document.getElementById('calculatorResults').style.display = 'none';
                        }
                    </script>
                    
                    <!-- Interactive Dashboard (Previous Version) -->
                    </div>
                

                
                    <!-- Progress Charts Tab -->
                <div id="chartsTab" class="student-tab-content">
                    <div class="section" id="chartsSection">
                    <h2 class="section-title"><i class="fas fa-chart-pie"></i> Performance Analysis</h2>
                    
                    <!-- Charts will only show if student has marks -->
                    <div id="chartsContent" style="display: none;">
                    
                    <!-- Result Calculation Process Flow -->
                    <div class="process-flow">
                        <div class="process-step">
                            <div class="process-icon"><i class="fas fa-edit"></i></div>
                            <p>Input Marks</p>
                        </div>
                        <div class="process-arrow"><i class="fas fa-arrow-right"></i></div>
                        <div class="process-step">
                            <div class="process-icon"><i class="fas fa-calculator"></i></div>
                            <p>Calculate %</p>
                        </div>
                        <div class="process-arrow"><i class="fas fa-arrow-right"></i></div>
                        <div class="process-step">
                            <div class="process-icon"><i class="fas fa-check-circle"></i></div>
                            <p>Check Criteria</p>
                        </div>
                        <div class="process-arrow"><i class="fas fa-arrow-right"></i></div>
                        <div class="process-step">
                            <div class="process-icon"><i class="fas fa-award"></i></div>
                            <p>Generate Result</p>
                        </div>
                        <div class="process-arrow"><i class="fas fa-arrow-right"></i></div>
                        <div class="process-step">
                            <div class="process-icon"><i class="fas fa-road"></i></div>
                            <p>Stream Suggest</p>
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: var(--space-24);">
                        <div>
                            <h3 style="margin-bottom: var(--space-16); text-align: center;">Subject-wise Marks Distribution</h3>
                            <div class="chart-container">
                                <canvas id="pieChart"></canvas>
                            </div>
                        </div>
                        <div>
                            <h3 style="margin-bottom: var(--space-16); text-align: center;">Marks vs Passing Marks</h3>
                            <div class="chart-container">
                                <canvas id="barChart"></canvas>
                            </div>
                        </div>
                    </div>
                    
                    <div style="margin-top: var(--space-24);">
                        <h3 style="margin-bottom: var(--space-16); text-align: center;">Progress Trend (Sample Monthly Data)</h3>
                        <div class="chart-container">
                            <canvas id="lineChart"></canvas>
                        </div>
                    </div>
                    </div>
                    
                    <!-- No Charts Message -->
                    <div id="noChartsMessage" class="no-results" style="text-align: center; padding: var(--space-32); color: var(--color-text-secondary);">
                        <i class="fas fa-chart-line" style="font-size: 3rem; margin-bottom: var(--space-16); color: var(--color-info);"></i>
                        <h3>Charts Not Available Yet</h3>
                        <p>Performance charts will appear here once your teacher enters your marks.</p>
                        <p style="margin-top: var(--space-16); font-size: var(--font-size-sm);">Check the <strong>Official Results</strong> tab for your current progress.</p>
                    </div>
                </div>
                
                    <!-- Performance Analysis -->
                    <div class="section">
                    <h2 class="section-title"><i class="fas fa-analytics"></i> Detailed Analysis</h2>
                    <div class="performance-analysis">
                        <div class="performance-card">
                            <h4><i class="fas fa-star"></i> Strengths</h4>
                            <p id="strengths">Your strong subjects will be listed here.</p>
                        </div>
                        <div class="performance-card">
                            <h4><i class="fas fa-exclamation-triangle"></i> Areas for Improvement</h4>
                            <p id="improvements">Subjects needing attention will be listed here.</p>
                        </div>
                        <div class="performance-card">
                            <h4><i class="fas fa-lightbulb"></i> Recommendations</h4>
                            <p id="recommendations">Personalized study suggestions will appear here.</p>
                        </div>
                    </div>
                </div>
                
                    <!-- Multimedia Section -->
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-play-circle"></i> Motivational Content</h2>
                        <div class="video-container">
                            <p style="margin-bottom: var(--space-16); text-align: center; color: var(--color-text-secondary);">Stay motivated and keep working towards your goals!</p>
                            <iframe src="./School Result Management System - Class 9_files/dQw4w9WgXcQ.html" title="Motivational Content" allowfullscreen=""></iframe>
                        </div>
                    </div>
                </div>

                <!-- Official Report Card Tab -->
                <div id="reportcardTab" class="student-tab-content">
                    <div class="section">
                        <div id="officialReportCard" class="report-card">
                            <div class="report-header">
                                <div class="school-logo">
                                    <div class="logo-placeholder">
                                        <i class="fas fa-graduation-cap" style="font-size: 3rem; color: var(--color-primary);"></i>
                                    </div>
                                </div>
                                <div class="school-info">
                                    <h1>${schoolInfo.name}</h1>
                                    <p>${schoolInfo.address}</p>
                                    <p>${schoolInfo.phone} | ${schoolInfo.email}</p>
                                    <h3>PROGRESS REPORT</h3>
                                    <p>Academic Session: ${schoolInfo.academic_year}</p>
                                </div>
                            </div>
                            
                            <div class="student-info-section">
                                <div class="student-info-grid">
                                    <div class="info-item">
                                        <label>Student Name:</label>
                                        <span id="reportStudentName"></span>
                                    </div>
                                    <div class="info-item">
                                        <label>Class:</label>
                                        <span id="reportClass"></span>
                                    </div>
                                    <div class="info-item">
                                        <label>Roll No:</label>
                                        <span id="reportRoll"></span>
                                    </div>
                                    <div class="info-item">
                                        <label>Date of Birth:</label>
                                        <span id="reportDOB"></span>
                                    </div>
                                    <div class="info-item">
                                        <label>Admission No:</label>
                                        <span id="reportAdmission"></span>
                                    </div>
                                    <div class="info-item">
                                        <label>Attendance:</label>
                                        <span id="reportAttendance"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="marks-table-section">
                                <table class="detailed-marks-table">
                                    <thead>
                                        <tr>
                                            <th rowspan="2">Subject</th>
                                            <th colspan="4">Marks Obtained</th>
                                            <th colspan="3">Weighted Marks</th>
                                            <th rowspan="2">Total<br>(100)</th>
                                            <th rowspan="2">Grade</th>
                                        </tr>
                                        <tr>
                                            <th>Unit Test 1</th>
                                            <th>Unit Test 2</th>
                                            <th>Half Yearly</th>
                                            <th>Annual</th>
                                            <th>Unit Test<br>20%</th>
                                            <th>Half Yearly<br>30%</th>
                                            <th>Annual<br>50%</th>
                                        </tr>
                                    </thead>
                                    <tbody id="detailedMarksTableBody">
                                        <!-- Marks will be populated by JavaScript -->
                                    </tbody>
                                    <tfoot>
                                        <tr class="grand-total">
                                            <td><strong>GRAND TOTAL</strong></td>
                                            <td id="totalUT1"></td>
                                            <td id="totalUT2"></td>
                                            <td id="totalHY"></td>
                                            <td id="totalAnnual"></td>
                                            <td id="totalWeightedUT"></td>
                                            <td id="totalWeightedHY"></td>
                                            <td id="totalWeightedAnnual"></td>
                                            <td id="grandTotal"></td>
                                            <td id="overallGrade"></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            
                            <div class="additional-info">
                                <div class="info-row">
                                    <div class="info-col">
                                        <label>Rank:</label>
                                        <span id="reportRank"></span>
                                    </div>
                                    <div class="info-col">
                                        <label>Percentage:</label>
                                        <span id="reportPercentage"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="co-scholastic-section">
                                <h3>Co-Scholastic Activities</h3>
                                <div class="co-scholastic-grid">
                                    <div class="co-item">
                                        <label>Physical Training:</label>
                                        <span id="reportPT"></span>
                                    </div>
                                    <div class="co-item">
                                        <label>Drawing:</label>
                                        <span id="reportDrawing"></span>
                                    </div>
                                    <div class="co-item">
                                        <label>Co-curricular Activities:</label>
                                        <span id="reportCoCurricular"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="remarks-section">
                                <label>Remarks:</label>
                                <div class="remarks-box" id="reportRemarks">Excellent performance. Keep up the good work!</div>
                            </div>
                            
                            <div class="promotion-section">
                                <label>Promoted to Class:</label>
                                <span id="promotedClass">10</span>
                            </div>
                            
                            <div class="grade-scale">
                                <h4>Grade Scale:</h4>
                                <div class="grade-legend">
                                    <span>A+ (90-100)</span>
                                    <span>A (80-89)</span>
                                    <span>B+ (70-79)</span>
                                    <span>B (60-69)</span>
                                    <span>C (50-59)</span>
                                    <span>D (40-49)</span>
                                    <span>E (0-39)</span>
                                </div>
                            </div>
                            
                            <div class="signatures-section">
                                <div class="signature-box">
                                    <div class="signature-line"></div>
                                    <label>Class Teacher</label>
                                </div>
                                <div class="signature-box">
                                    <div class="signature-line"></div>
                                    <label>Principal</label>
                                </div>
                                <div class="signature-box">
                                    <div class="signature-line"></div>
                                    <label>Parent/Guardian</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Comparison Analysis Tab -->
                <div id="comparisonTab" class="student-tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-chart-bar"></i> Performance Comparison</h2>
                        <p style="color: var(--color-text-secondary); margin-bottom: var(--space-24); text-align: center;">Compare your performance with class average</p>
                        
                        <div class="comparison-charts">
                            <div class="comparison-chart-container">
                                <h3>Subject-wise Performance Comparison</h3>
                                <div class="chart-container">
                                    <canvas id="comparisonBarChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Download Reports Tab -->
                <div id="downloadTab" class="student-tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-download"></i> Download Reports</h2>
                        <p style="color: var(--color-text-secondary); margin-bottom: var(--space-24); text-align: center;">Download your academic reports in various formats</p>
                        
                        <div class="download-options" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: var(--space-24);">
                            <div class="download-card" style="background: var(--color-surface); padding: var(--space-24); border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--color-card-border);">
                                <div class="download-icon" style="font-size: 3rem; color: var(--color-primary); margin-bottom: var(--space-16);">
                                    <i class="fas fa-file-pdf"></i>
                                </div>
                                <h3>Progress Report</h3>
                                <p>Download comprehensive report with all your academic data and analysis</p>
                                <button class="btn btn-primary" onclick="downloadProgressReport()">
                                    <i class="fas fa-download"></i> Download Progress Report
                                </button>
                            </div>
                        </div>
                        
                        <div id="reportPreview" style="margin-top: var(--space-32); padding: var(--space-24); background: var(--color-surface); border-radius: var(--radius-lg); border: 1px solid var(--color-card-border);">
                            <h3 style="color: var(--color-primary); text-align: center; margin-bottom: var(--space-20);">Report Preview</h3>
                            <div id="reportContent">
                                <!-- Report content will be generated here -->
                                <p style="text-align: center; color: var(--color-text-secondary);">Your complete academic report will be shown here when generated.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Teacher Dashboard -->
    <div id="teacherDashboard" class="dashboard">
        <div class="dashboard-header">
            <div class="container">
                <div class="dashboard-nav">
                    <div class="user-info">
                        <div class="user-avatar"><i class="fas fa-chalkboard-teacher"></i></div>
                        <div>
                            <h3 id="teacherName">Class 9 Teacher</h3>
                            <p>Class 9 Teacher</p>
                        </div>
                    </div>
                    <button class="btn btn-secondary" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            </div>
        </div>
        
        <div class="dashboard-content">
            <div class="container">
                <div class="teacher-tabs">
                    <button class="teacher-tab active" onclick="switchTeacherTab(&#39;dashboard&#39;)">Dashboard</button>
                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;students&#39;)">View Students</button>
                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;register&#39;)">Register Student</button>
                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;marks&#39;)">Enter Marks</button>
                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;editmarks&#39;)">Edit Marks</button>

                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;reports&#39;)">View Reports</button>
                    <button class="teacher-tab" onclick="switchTeacherTab(&#39;changepassword&#39;)">Change Password</button>
                </div>
                
                <!-- Teacher Dashboard Tab -->
                <div id="dashboardTab" class="tab-content active">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-tachometer-alt"></i> Teacher Dashboard</h2>
                        
                        <div class="dashboard-stats">
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-users"></i></div>
                                <div class="stat-content">
                                    <h3 id="totalStudents">115</h3>
                                    <p>Total Students</p>
                                </div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-clipboard-check"></i></div>
                                <div class="stat-content">
                                    <h3 id="marksEntered">0</h3>
                                    <p>Marks Entered</p>
                                </div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-chart-line"></i></div>
                                <div class="stat-content">
                                    <h3 id="avgPerformance">--</h3>
                                    <p>Class Average</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="quick-actions">
                            <button class="btn btn-primary" onclick="switchTeacherTab(&#39;register&#39;)">
                                <i class="fas fa-user-plus"></i> Register New Student
                            </button>
                            <button class="btn btn-secondary" onclick="switchTeacherTab(&#39;marks&#39;)">
                                <i class="fas fa-edit"></i> Enter Marks
                            </button>
                            <button class="btn btn--outline" onclick="switchTeacherTab(&#39;reports&#39;)">
                                <i class="fas fa-file-alt"></i> View Reports
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- View Students Tab -->
                <div id="studentsTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-users"></i> All Students - Class 9A</h2>
                        <div class="search-bar">
                            <input type="text" id="searchInput" placeholder="Search by name or roll number...">
                            <button class="btn btn-secondary" onclick="searchStudents()">
                                <i class="fas fa-search"></i> Search
                            </button>
                        </div>
                        <table class="students-table">
                            <thead>
                                <tr>
                                    <th>Roll No.</th>
                                    <th>Student Name</th>
                                    <th>Username</th>
                                    <th>Registration No.</th>
                                    <th>Date of Birth</th>
                                    <th>MIL Subject</th>
                                    <th>Elective Subject</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="studentsTableBody">
                                <!-- Students will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Register Student Tab -->
                <div id="registerTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-user-plus"></i> Register New Student</h2>
                        
                        <form id="studentRegistrationForm" class="registration-form">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="studentFullName">Full Name *</label>
                                    <input type="text" id="studentFullName" required="">
                                </div>
                                
                                <div class="form-group">
                                    <label for="studentUsername">Username *</label>
                                    <input type="text" id="studentUsername" placeholder="e.g., 25H0602FIRSTNAME###" required="">
                                </div>
                                
                                <div class="form-group">
                                    <label for="studentRegNo">Registration Number *</label>
                                    <input type="text" id="studentRegNo" placeholder="25/RP/0602/######/25" required="">
                                </div>
                                
                                <div class="form-group">
                                    <label for="studentDOB">Date of Birth *</label>
                                    <input type="date" id="studentDOB" required="">
                                </div>
                                
                                <div class="form-group">
                                    <label for="milChoice">MIL Choice *</label>
                                    <select id="milChoice" required="">
                                        <option value="">Select MIL</option>
                                        <option value="hindi">Hindi</option>
                                        <option value="assamese">Assamese</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="electiveChoice">Elective Choice *</label>
                                    <select id="electiveChoice" required="">
                                        <option value="">Select Elective</option>
                                        <option value="computer">Computer</option>
                                        <option value="ecommerce">E-commerce</option>
                                        <option value="advanced_geography">Advanced Geography</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Register Student
                                </button>
                                <button type="reset" class="btn btn-secondary">
                                    <i class="fas fa-undo"></i> Reset Form
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                
                <!-- Edit Marks Tab -->
                <div id="editmarksTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-edit"></i> Edit Student Marks</h2>
                        
                        <div class="marks-entry-wizard">
                            <!-- Step 1: Select Exam for Edit -->
                            <div class="wizard-step active" id="editExamStep">
                                <h3>Step 1: Select Exam Phase</h3>
                                <div class="exam-selection">
                                    <button class="exam-btn" onclick="selectEditExam(&#39;ut1&#39;)">
                                        <i class="fas fa-clipboard-list"></i>
                                        <span>Unit Test 1</span>
                                        <small>Weightage: 10%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectEditExam(&#39;hy&#39;)">
                                        <i class="fas fa-book-open"></i>
                                        <span>Half Yearly</span>
                                        <small>Weightage: 30%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectEditExam(&#39;ut2&#39;)">
                                        <i class="fas fa-clipboard-list"></i>
                                        <span>Unit Test 2</span>
                                        <small>Weightage: 10%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectEditExam(&#39;annual&#39;)">
                                        <i class="fas fa-graduation-cap"></i>
                                        <span>Annual Exam</span>
                                        <small>Weightage: 50%</small>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Step 2: Select Subject for Edit -->
                            <div class="wizard-step" id="editSubjectStep">
                                <h3>Step 2: Select Subject</h3>
                                <div class="subject-selection">
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;english&#39;)">
                                        <i class="fas fa-language"></i>
                                        <span>English</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;mathematics&#39;)">
                                        <i class="fas fa-calculator"></i>
                                        <span>Mathematics</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;social&#39;)">
                                        <i class="fas fa-globe"></i>
                                        <span>Social</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;science&#39;)">
                                        <i class="fas fa-microscope"></i>
                                        <span>Science</span>
                                        <small>Combined P+C+B</small>
                                    </button>
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;mil&#39;)">
                                        <i class="fas fa-font"></i>
                                        <span>MIL</span>
                                        <small>Hindi/Assamese</small>
                                    </button>
                                    <button class="subject-btn" onclick="selectEditSubject(&#39;elective&#39;)">
                                        <i class="fas fa-star"></i>
                                        <span>Elective</span>
                                        <small>Computer/E-comm/Geo</small>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Step 3: Select Student for Edit -->
                            <div class="wizard-step" id="editStudentStep">
                                <h3>Step 3: Select Student (Only students with existing marks)</h3>
                                <div class="student-search">
                                    <input type="text" id="editStudentSearchInput" placeholder="Search by name or username..." onkeyup="filterEditStudents()">
                                </div>
                                <div class="student-list" id="editStudentsList">
                                    <!-- Students with marks will be populated here -->
                                </div>
                            </div>
                            
                            <!-- Step 4: Edit Marks -->
                            <div class="wizard-step" id="editMarksEntryStep">
                                <h3>Step 4: Edit Existing Marks</h3>
                                <div class="marks-form-container">
                                    <div class="selected-info">
                                        <p><strong>Exam:</strong> <span id="editSelectedExam"></span></p>
                                        <p><strong>Subject:</strong> <span id="editSelectedSubject"></span></p>
                                        <p><strong>Student:</strong> <span id="editSelectedStudent"></span></p>
                                        <p style="color: var(--color-warning); font-size: var(--font-size-sm); margin-top: var(--space-8);"><i class="fas fa-exclamation-triangle"></i> You are editing existing marks. Current values are pre-filled below.</p>
                                    </div>
                                    
                                    <form id="editMarksEntryForm" class="marks-form">
                                        <div id="editMarksInputs">
                                            <!-- Dynamic marks inputs will be generated here with existing values -->
                                        </div>
                                        
                                        <div class="form-actions">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-save"></i> Update Marks
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="resetEditMarksWizard()">
                                                <i class="fas fa-undo"></i> Cancel Edit
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Enter Marks Tab -->
                <div id="marksTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-edit"></i> Enter Marks</h2>
                        
                        <div class="marks-entry-wizard">
                            <!-- Step 1: Select Exam -->
                            <div class="wizard-step active" id="examStep">
                                <h3>Step 1: Select Exam Phase</h3>
                                <div class="exam-selection">
                                    <button class="exam-btn" onclick="selectExam(&#39;ut1&#39;)">
                                        <i class="fas fa-clipboard-list"></i>
                                        <span>Unit Test 1</span>
                                        <small>Weightage: 10%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectExam(&#39;hy&#39;)">
                                        <i class="fas fa-book-open"></i>
                                        <span>Half Yearly</span>
                                        <small>Weightage: 30%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectExam(&#39;ut2&#39;)">
                                        <i class="fas fa-clipboard-list"></i>
                                        <span>Unit Test 2</span>
                                        <small>Weightage: 10%</small>
                                    </button>
                                    <button class="exam-btn" onclick="selectExam(&#39;annual&#39;)">
                                        <i class="fas fa-graduation-cap"></i>
                                        <span>Annual Exam</span>
                                        <small>Weightage: 50%</small>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Step 2: Select Subject -->
                            <div class="wizard-step" id="subjectStep">
                                <h3>Step 2: Select Subject</h3>
                                <div class="subject-selection">
                                    <button class="subject-btn" onclick="selectSubject(&#39;english&#39;)">
                                        <i class="fas fa-language"></i>
                                        <span>English</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectSubject(&#39;mathematics&#39;)">
                                        <i class="fas fa-calculator"></i>
                                        <span>Mathematics</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectSubject(&#39;social&#39;)">
                                        <i class="fas fa-globe"></i>
                                        <span>Social</span>
                                    </button>
                                    <button class="subject-btn" onclick="selectSubject(&#39;science&#39;)">
                                        <i class="fas fa-microscope"></i>
                                        <span>Science</span>
                                        <small>Combined P+C+B</small>
                                    </button>
                                    <button class="subject-btn" onclick="selectSubject(&#39;mil&#39;)">
                                        <i class="fas fa-font"></i>
                                        <span>MIL</span>
                                        <small>Hindi/Assamese</small>
                                    </button>
                                    <button class="subject-btn" onclick="selectSubject(&#39;elective&#39;)">
                                        <i class="fas fa-star"></i>
                                        <span>Elective</span>
                                        <small>Computer/E-comm/Geo</small>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Step 3: Select Student -->
                            <div class="wizard-step" id="studentStep">
                                <h3>Step 3: Select Student</h3>
                                <div class="student-search">
                                    <input type="text" id="studentSearchInput" placeholder="Search by name or username..." onkeyup="filterStudents()">
                                </div>
                                <div class="student-list" id="studentsList">
                                    <!-- Students will be populated here -->
                                </div>
                            </div>
                            
                            <!-- Step 4: Enter Marks -->
                            <div class="wizard-step" id="marksEntryStep">
                                <h3>Step 4: Enter Marks</h3>
                                <div class="marks-form-container">
                                    <div class="selected-info">
                                        <p><strong>Exam:</strong> <span id="selectedExam"></span></p>
                                        <p><strong>Subject:</strong> <span id="selectedSubject"></span></p>
                                        <p><strong>Student:</strong> <span id="selectedStudent"></span></p>
                                    </div>
                                    
                                    <form id="marksEntryForm" class="marks-form">
                                        <div id="marksInputs">
                                            <!-- Dynamic marks inputs will be generated here -->
                                        </div>
                                        
                                        <div class="form-actions">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-save"></i> Save Marks
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="resetMarksWizard()">
                                                <i class="fas fa-undo"></i> Start Over
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- View Reports Tab -->
                <div id="reportsTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-balance-scale"></i> Student Comparison Tool</h2>
                        <div class="comparison-controls">
                            <h4>Select Students to Compare (2-5 students):</h4>
                            <div id="compareCheckboxes">
                                <!-- Checkboxes will be populated by JavaScript -->
                            </div>
                            <button class="btn btn-primary" onclick="compareSelectedStudents()" style="margin-top: var(--space-16);">
                                <i class="fas fa-chart-bar"></i> Compare Selected Students
                            </button>
                        </div>
                        <div id="comparisonResults" style="display: none;">
                            <h3 style="margin: var(--space-24) 0 var(--space-16) 0;">Comparison Results</h3>
                            <div class="chart-container">
                                <canvas id="comparisonChart"></canvas>
                            </div>
                            <div id="comparisonTable" style="margin-top: var(--space-24);"></div>
                        </div>
                    </div>
                </div>
                
                <!-- View Reports Tab Content -->
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-file-alt"></i> Student Reports</h2>
                        
                        <div class="reports-controls">
                            <div class="student-selector">
                                <label for="reportStudentSelect">Select Student:</label>
                                <select id="reportStudentSelect" onchange="generateStudentReport()">
                                    <option value="">Choose a student...</option>
                                </select>
                            </div>
                        </div>
                        
                        <div id="studentReportContainer" style="display: none;">
                            <!-- Individual student report will be displayed here -->
                        </div>
                    </div>
                </div>
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-chart-line"></i> Class Analytics</h2>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: var(--space-24);">
                            <div>
                                <h3 style="margin-bottom: var(--space-16); text-align: center;">Class Average by Subject</h3>
                                <div class="chart-container">
                                    <canvas id="classAverageChart"></canvas>
                                </div>
                            </div>
                            <div>
                                <h3 style="margin-bottom: var(--space-16); text-align: center;">Pass/Fail Distribution</h3>
                                <div class="chart-container">
                                    <canvas id="passFailChart"></canvas>
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin-top: var(--space-32);">
                            <h3 style="margin-bottom: var(--space-16); text-align: center;">Top 5 Students</h3>
                            <div class="chart-container">
                                <canvas id="topStudentsChart"></canvas>
                            </div>
                        </div>
                        
                        <div style="margin-top: var(--space-32);">
                            <h3 style="margin-bottom: var(--space-16); text-align: center;">Subject-wise Class Performance</h3>
                            <div class="chart-container">
                                <canvas id="subjectPerformanceChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                

                
                <!-- Teacher Change Password Tab -->
                <div id="changepasswordTab" class="tab-content">
                    <div class="section">
                        <h2 class="section-title"><i class="fas fa-key"></i> Change Your Password</h2>
                        
                        <div class="container" style="max-width: 600px; margin: 0 auto;">
                            <form id="teacherPasswordChangeForm" class="password-change-form">
                                <div class="form-group">
                                    <label for="teacherCurrentPassword">Current Password *</label>
                                    <div class="password-input-group">
                                        <input type="password" id="teacherCurrentPassword" placeholder="Enter your current password" required="">
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;teacherCurrentPassword&#39;)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="teacherNewPassword">New Password *</label>
                                    <div class="password-input-group">
                                        <input type="password" id="teacherNewPassword" placeholder="Enter new password (minimum 8 characters)" required="" oninput="checkTeacherPasswordStrength()">
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;teacherNewPassword&#39;)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                    <div id="teacherPasswordStrength" class="password-strength"></div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="teacherConfirmPassword">Confirm New Password *</label>
                                    <div class="password-input-group">
                                        <input type="password" id="teacherConfirmPassword" placeholder="Confirm your new password" required="" oninput="checkTeacherPasswordMatch()">
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;teacherConfirmPassword&#39;)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                    <div id="teacherPasswordMatch" class="password-match"></div>
                                </div>
                                
                                <div class="password-requirements">
                                    <h4>Password Requirements:</h4>
                                    <div class="requirements-list">
                                        <div class="requirement" id="teacherReq1"><i class="fas fa-times"></i> Minimum 8 characters</div>
                                        <div class="requirement" id="teacherReq2"><i class="fas fa-times"></i> Contains letters and numbers</div>
                                        <div class="requirement" id="teacherReq3"><i class="fas fa-times"></i> Passwords match</div>
                                    </div>
                                </div>
                                
                                <div class="form-actions">
                                    <button type="submit" class="btn btn-primary" id="teacherUpdatePasswordBtn" disabled="">
                                        <i class="fas fa-save"></i> Update Password
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="switchTeacherTab(&#39;dashboard&#39;)">
                                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Individual Student Detail Modal (will be shown when needed) -->
                <div id="studentDetailModal" style="display: none;">
                    <!-- Student details will be populated by JavaScript -->
                </div>
            </div>
        
    



    <!-- Student Change Password Modal -->
    <div id="changePasswordModal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-key"></i> Change Password</h3>
                <button class="modal-close" onclick="hideChangePasswordModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <form id="studentPasswordChangeForm" class="password-change-form">
                <div class="form-group">
                    <label for="studentCurrentPassword">Current Password *</label>
                    <div class="password-input-group">
                        <input type="password" id="studentCurrentPassword" placeholder="Enter your current password" required="">
                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;studentCurrentPassword&#39;)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="studentNewPassword">New Password *</label>
                    <div class="password-input-group">
                        <input type="password" id="studentNewPassword" placeholder="Enter new password (minimum 6 characters)" required="" oninput="checkStudentPasswordStrength()">
                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;studentNewPassword&#39;)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div id="studentPasswordStrength" class="password-strength"></div>
                </div>
                
                <div class="form-group">
                    <label for="studentConfirmPassword">Confirm New Password *</label>
                    <div class="password-input-group">
                        <input type="password" id="studentConfirmPassword" placeholder="Confirm your new password" required="" oninput="checkStudentPasswordMatch()">
                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&#39;studentConfirmPassword&#39;)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div id="studentPasswordMatch" class="password-match"></div>
                </div>
                
                <div class="password-requirements">
                    <h4>Password Requirements:</h4>
                    <div class="requirements-list">
                        <div class="requirement" id="studentReq1"><i class="fas fa-times"></i> Minimum 6 characters</div>
                        <div class="requirement" id="studentReq2"><i class="fas fa-times"></i> Contains letters and numbers</div>
                        <div class="requirement" id="studentReq3"><i class="fas fa-times"></i> Passwords match</div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" id="studentUpdatePasswordBtn" disabled="">
                        <i class="fas fa-save"></i> Update Password
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="hideChangePasswordModal()">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>



    <script>
        const subjects = {
            english: { name: 'English', code: 'ENG', unit_test_max: 50, descriptive_max: 45, omr_max: 45, internal_max: 10, total_max: 100 },
            mathematics: { name: 'Mathematics', code: 'MATH', unit_test_max: 50, descriptive_max: 45, omr_max: 45, internal_max: 10, total_max: 100 },
            social: { name: 'Social', code: 'SOCIAL', unit_test_max: 50, descriptive_max: 45, omr_max: 45, internal_max: 10, total_max: 100 },
            science: { name: 'Science', code: 'SCI', unit_test_max: 50, descriptive_max: 45, omr_max: 45, internal_max: 10, total_max: 100, sub_subjects: ['Physics', 'Chemistry', 'Biology'] }
        };

        const milOptions = {
            hindi: { name: 'Hindi', code: 'HINDI', unit_test_max: 50, descriptive_max: 100, total_max: 100 },
            assamese: { name: 'Assamese', code: 'ASSAMESE', unit_test_max: 50, descriptive_max: 100, total_max: 100 }
        };

        const electiveOptions = {
            computer: { name: 'Computer', code: 'COMP', unit_test_max: 50, descriptive_max: 70, internal_max: 30, total_max: 100 },
            ecommerce: { name: 'E-commerce', code: 'ECOM', unit_test_max: 50, descriptive_max: 70, internal_max: 30, total_max: 100 },
            advanced_geography: { name: 'Advanced Geography', code: 'ADVGEO', unit_test_max: 50, descriptive_max: 70, internal_max: 30, total_max: 100 }
        };

        const exams = {
            ut1: { name: 'Unit Test 1', code: 'UT1', weightage: 10 },
            hy: { name: 'Half Yearly', code: 'HY', weightage: 30 },
            ut2: { name: 'Unit Test 2', code: 'UT2', weightage: 10 },
            annual: { name: 'Annual', code: 'ANNUAL', weightage: 50 }
        };

        const passingCriteria = {
            overall_percentage: 30, // 30% of 600 = 180 marks
            total_marks: 600, // 6 subjects × 100 marks each
            passing_marks: 180, // 30% of 600
            descriptive_min: 14,
            omr_min: 14,
            internal_min: 3,
            mil_descriptive_min: 30,
            elective_descriptive_min: 21,
            elective_internal_min: 9
        };

        // ALL 115 STUDENTS - Complete Data for Academic Year 2025-2026
        const studentsData = {};
        
        // Function to initialize ALL 115 students with correct data
        function initializeAllStudents() {
            // ALL 115 STUDENTS - Complete list with accurate data
                const allStudents = [
      {username: '25H0602AAMIRUDDIN222', name: 'AAMIRUDDIN ALI', registrationno: '25/RP/0602/929086/25', dob: '2010-10-01', rollno: 1},
      {username: '25H0602ABHIJEET106', name: 'ABHIJEET DEY', registrationno: '25/RP/0602/928976/25', dob: '2011-02-06', rollno: 2},
      {username: '25H0602ABHINAB106', name: 'ABHINAB GOGOI', registrationno: '25/RP/0602/928977/25', dob: '2011-06-20', rollno: 3},
      {username: '25H0602ABHISHEK106', name: 'ABHISHEK SRIVASTAV', registrationno: '25/RP/0602/928978/25', dob: '2012-01-18', rollno: 4},
      {username: '25H0602ABIR263', name: 'ABIR SARKAR', registrationno: '25/RP/0602/949232/24', dob: '2009-11-12', rollno: 5},
      {username: '25H0602AKANGSHA156', name: 'AKANGSHA DUTTA', registrationno: '25/RP/0602/929034/25', dob: '2010-07-16', rollno: 6},
      {username: '25H0602AKASH118', name: 'AKASH JYOTI NATH', registrationno: '25/RP/0602/928979/25', dob: '2011-04-25', rollno: 7},
      {username: '25H0602AMAN263', name: 'AMAN KUMAR PRASAD', registrationno: '25/RP/0602/949235/24', dob: '2010-03-22', rollno: 8},
      {username: '25H0602AMINA157', name: 'AMINA KHATOON', registrationno: '25/RP/0602/929035/25', dob: '2010-09-17', rollno: 9},
      {username: '25H0602ANASHKITA183', name: 'ANASHKITA GHOSH', registrationno: '25/RP/0602/929036/25', dob: '2011-07-27', rollno: 10},
      {username: '25H0602ANKIT107', name: 'ANKIT DAS', registrationno: '25/RP/0602/928980/25', dob: '2011-07-01', rollno: 11},
      {username: '25H0602ANKITSAH107', name: 'ANKIT SAH', registrationno: '25/RP/0602/928981/25', dob: '2010-09-01', rollno: 12},
      {username: '25H0602ANKITA163', name: 'ANKITA SAH', registrationno: '25/RP/0602/929037/25', dob: '2010-09-01', rollno: 13},
      {username: '25H0602ANSUMAN108', name: 'ANSUMAN SUR', registrationno: '25/RP/0602/928982/25', dob: '2010-05-22', rollno: 14},
      {username: '25H0602ANUSHKA161', name: 'ANUSHKA CHAKRABORTY', registrationno: '25/RP/0602/929038/25', dob: '2010-03-28', rollno: 15},
      {username: '25H0602APURBA274', name: 'APURBA DEBNATH', registrationno: '25/RP/0602/949237/24', dob: '2010-01-11', rollno: 16},
      {username: '25H0602ARNOB109', name: 'ARNOB GOHAIN', registrationno: '25/RP/0602/928983/25', dob: '2009-11-03', rollno: 17},
      {username: '25H0602ARPANA162', name: 'ARPANA MAHATO', registrationno: '25/RP/0602/929039/25', dob: '2009-12-12', rollno: 18},
      {username: '25H0602ASMI164', name: 'ASMI CHAKMA', registrationno: '25/RP/0602/929040/25', dob: '2012-01-17', rollno: 19},
      {username: '25H0602AYUSH109', name: 'AYUSH RAI', registrationno: '25/RP/0602/928984/25', dob: '2011-12-16', rollno: 20},
      {username: '25H0602AYUSH108', name: 'AYUSH SHAH', registrationno: '25/RP/0602/928986/25', dob: '2011-02-16', rollno: 21},
      {username: '25H0602AYUSH110', name: 'AYUSH SHARMA', registrationno: '25/RP/0602/928987/25', dob: '2010-08-01', rollno: 22},
      {username: '25H0602AYUSH111', name: 'AYUSH ROY CHOUDHURY', registrationno: '25/RP/0602/928985/25', dob: '2011-04-01', rollno: 23},
      {username: '25H0602BIDYUT110', name: 'BIDYUT JYOTI GOGOI', registrationno: '25/RP/0602/928988/25', dob: '2011-02-13', rollno: 24},
      {username: '25H0602BIPRAJIT111', name: 'BIPRAJIT DAS', registrationno: '25/RP/0602/929031/25', dob: '2010-09-25', rollno: 25},
      {username: '25H0602CHANGPRIT124', name: 'CHANGPRIT GOHAIN', registrationno: '25/RP/0602/928989/25', dob: '2011-01-12', rollno: 26},
      {username: '25H0602CHAYANIKA165', name: 'CHAYANIKA GOHAIN', registrationno: '25/RP/0602/929041/25', dob: '2010-10-21', rollno: 27},
      {username: '25H0602DEBORSHI115', name: 'DEBORSHI DADHARA', registrationno: '25/RP/0602/928990/25', dob: '2011-02-07', rollno: 28},
      {username: '25H0602DIBYAM113', name: 'DIBYAM SHARMA', registrationno: '25/RP/0602/928991/25', dob: '2011-08-11', rollno: 29},
      {username: '25H0602DISHA166', name: 'DISHA KACHARI', registrationno: '25/RP/0602/929042/25', dob: '2010-10-20', rollno: 30},
      {username: '25H0602DOLI176', name: 'DOLI BASFOR', registrationno: '25/RP/0602/929043/25', dob: '2010-04-06', rollno: 31},
      {username: '25H0602DUDA169', name: 'DUDA ASWANI', registrationno: '25/RP/0602/929044/25', dob: '2010-08-22', rollno: 32},
      {username: '25H0602FARHIN167', name: 'FARHIN HUSSAIN', registrationno: '25/RP/0602/929045/25', dob: '2012-01-28', rollno: 33},
      {username: '25H0602HARSHIT125', name: 'HARSHIT SAH', registrationno: '25/RP/0602/928992/25', dob: '2011-09-21', rollno: 34},
      {username: '25H0602HUMAYRA184', name: 'HUMAYRA KHAN', registrationno: '25/RP/0602/929046/25', dob: '2011-03-16', rollno: 35},
      {username: '25H0602ISHANT116', name: 'ISHANT DEY', registrationno: '25/RP/0602/928993/25', dob: '2011-10-14', rollno: 36},
      {username: '25H0602IVAN117', name: 'IVAN KERKETTA', registrationno: '25/RP/0602/928994/25', dob: '2010-02-14', rollno: 37},
      {username: '25H0602JAGRITA175', name: 'JAGRITA DAS', registrationno: '25/RP/0602/929047/25', dob: '2010-09-25', rollno: 38},
      {username: '25H0602JERIFA158', name: 'JERIFA PARBIN', registrationno: '25/RP/0602/929048/25', dob: '2010-02-17', rollno: 39},
      {username: '25H0602JYOTI160', name: 'JYOTI NATH', registrationno: '25/RP/0602/929049/25', dob: '2010-10-13', rollno: 40},
      {username: '25H0602KALIM120', name: 'KALIM HUSSAIN TAPADAR', registrationno: '25/RP/0602/928995/25', dob: '2009-10-16', rollno: 41},
      {username: '25H0602KARAN119', name: 'KARAN MAZUMDER', registrationno: '25/RP/0602/928996/25', dob: '2011-05-24', rollno: 42},
      {username: '25H0602KASTURI168', name: 'KASTURI BORAH', registrationno: '25/RP/0602/929050/25', dob: '2010-10-01', rollno: 43},
      {username: '25H0602KAUSHIK131', name: 'KAUSHIK TANTI', registrationno: '25/RP/0602/928997/25', dob: '2010-09-16', rollno: 44},
      {username: '25H0602KHANJAN114', name: 'KHANJAN URANG', registrationno: '25/RP/0602/928998/25', dob: '2010-09-19', rollno: 45},
      {username: '25H0602KHUSBOO170', name: 'KHUSBOO KHATOON', registrationno: '25/RP/0602/929051/25', dob: '2010-08-19', rollno: 46},
      {username: '25H0602KIRON112', name: 'KIRON BHUMIJ', registrationno: '25/RP/0602/928999/25', dob: '2011-05-07', rollno: 47},
      {username: '25H0602KRISH132', name: 'KRISH RAJ DUTTA', registrationno: '25/RP/0602/929000/25', dob: '2011-02-15', rollno: 48},
      {username: '25H0602KRITIKA306', name: 'KRITIKA MAHAJAN', registrationno: '25/RP/0602/949298/24', dob: '2010-04-01', rollno: 49},
      {username: '25H0602KUNAL122', name: 'KUNAL ROY', registrationno: '25/RP/0602/929001/25', dob: '2010-06-10', rollno: 50},
      {username: '25H0602KUSHBU171', name: 'KUSHBU CHAKMA', registrationno: '25/RP/0602/929052/25', dob: '2011-09-21', rollno: 51},
      {username: '25H0602LAMHAI173', name: 'LAMHAI WANGSU', registrationno: '25/RP/0602/929053/25', dob: '2010-07-21', rollno: 52},
      {username: '25H0602LIHNON174', name: 'LIHNON WANGSU', registrationno: '25/RP/0602/929054/25', dob: '2010-07-25', rollno: 53},
      {username: '25H0602MADHAB121', name: 'MADHAB RAJ KACHARI', registrationno: '25/RP/0602/929002/25', dob: '2011-06-17', rollno: 54},
      {username: '25H0602MADHURI172', name: 'MADHURI NEOG', registrationno: '25/RP/0602/929055/25', dob: '2010-03-27', rollno: 55},
      {username: '25H0602MANISHA179', name: 'MANISHA DAS', registrationno: '25/RP/0602/929056/25', dob: '2010-09-10', rollno: 56},
      {username: '25H0602MD123', name: 'MD DAANISH', registrationno: '25/RP/0602/929003/25', dob: '2009-11-08', rollno: 57},
      {username: '25H0602MD126', name: 'MD FARHAN DANISH', registrationno: '25/RP/0602/929004/25', dob: '2010-10-23', rollno: 58},
      {username: '25H0602MD127', name: 'MD LUTFAR RAHMAN', registrationno: '25/RP/0602/929005/25', dob: '2010-02-25', rollno: 59},
      {username: '25H0602MD128', name: 'MD RAHAN KHAN', registrationno: '25/RP/0602/929018/25', dob: '2009-09-15', rollno: 60},
      {username: '25H0602MD129', name: 'MD REHAN RAIN', registrationno: '25/RP/0602/929006/25', dob: '2010-10-28', rollno: 61},
      {username: '25H0602MOHAMMAD130', name: 'MOHAMMAD SADAKAT', registrationno: '25/RP/0602/929033/25', dob: '2010-03-04', rollno: 62},
      {username: '25H0602MOHAMMED139', name: 'MOHAMMED ADNAN', registrationno: '25/RP/0602/929007/25', dob: '2011-03-15', rollno: 63},
      {username: '25H0602MONIKA177', name: 'MONIKA KUMARI SHARMA', registrationno: '25/RP/0602/929057/25', dob: '2011-01-06', rollno: 64},
      {username: '25H0602MONISHA182', name: 'MONISHA CHOUDHURY', registrationno: '25/RP/0602/929058/25', dob: '2009-08-11', rollno: 65},
      {username: '25H0602MRITYUNJAY147', name: 'MRITYUNJAY KUMAR', registrationno: '25/RP/0602/929008/25', dob: '2009-11-01', rollno: 66},
      {username: '25H0602MUSKAN180', name: 'MUSKAN PARVEEN', registrationno: '25/RP/0602/929059/25', dob: '2010-09-02', rollno: 67},
      {username: '25H0602NANDINI178', name: 'NANDINI KUMARI', registrationno: '25/RP/0602/929085/25', dob: '2010-08-12', rollno: 68},
      {username: '25H0602NGAMKHOW191', name: 'NGAMKHOW BIHAM', registrationno: '25/RP/0602/929060/25', dob: '2010-04-07', rollno: 69},
      {username: '25H0602NISHA193', name: 'NISHA KUMARI', registrationno: '25/RP/0602/929061/25', dob: '2010-02-03', rollno: 70},
      {username: '25H0602NISHITA187', name: 'NISHITA DAS', registrationno: '25/RP/0602/929062/25', dob: '2011-03-30', rollno: 71},
      {username: '25H0602PAWAN133', name: 'PAWAN KUMAR ORAON', registrationno: '25/RP/0602/929009/25', dob: '2011-02-02', rollno: 72},
      {username: '25H0602PAYAL185', name: 'PAYAL GHOSH', registrationno: '25/RP/0602/929063/25', dob: '2010-12-23', rollno: 73},
      {username: '25H0602PHENON186', name: 'PHENON WANGSU', registrationno: '25/RP/0602/929064/25', dob: '2011-03-14', rollno: 74},
      {username: '25H0602PIYANGSU134', name: 'PIYANGSU DEBNATH', registrationno: '25/RP/0602/929013/25', dob: '2010-06-27', rollno: 75},
      {username: '25H0602PRAKASH135', name: 'PRAKASH PATEL', registrationno: '25/RP/0602/929010/25', dob: '2008-01-10', rollno: 76},
      {username: '25H0602PRINCE136', name: 'PRINCE KUMAR', registrationno: '25/RP/0602/929011/25', dob: '2012-01-01', rollno: 77},
      {username: '25H0602PRINCE137', name: 'PRINCE PRASAD', registrationno: '25/RP/0602/929012/25', dob: '2011-05-14', rollno: 78},
      {username: '25H0602PRIYANGSHI189', name: 'PRIYANGSHI BHUYAN', registrationno: '25/RP/0602/929065/25', dob: '2011-09-09', rollno: 79},
      {username: '25H0602PRIYOM150', name: 'PRIYOM KARMAKAR', registrationno: '25/RP/0602/929014/25', dob: '2010-11-20', rollno: 80},
      {username: '25H0602PUJA188', name: 'PUJA SHARMA', registrationno: '25/RP/0602/929066/25', dob: '2009-03-25', rollno: 81},
      {username: '25H0602RAAJ138', name: 'RAAJ SHARMA', registrationno: '25/RP/0602/929016/25', dob: '2010-02-18', rollno: 82},
      {username: '25H0602RADHA181', name: 'RADHA DAS', registrationno: '25/RP/0602/929067/25', dob: '2011-07-10', rollno: 83},
      {username: '25H0602RAHUL149', name: 'RAHUL MAZUMDER', registrationno: '25/RP/0602/929015/25', dob: '2010-05-26', rollno: 84},
      {username: '25H0602RANAJIT140', name: 'RANAJIT SEAL', registrationno: '25/RP/0602/929017/25', dob: '2010-12-13', rollno: 85},
      {username: '25H0602RIPROJIT141', name: 'RIPROJIT DEB', registrationno: '25/RP/0602/929019/25', dob: '2010-12-20', rollno: 86},
      {username: '25H0602RITIKA202', name: 'RITIKA DEB', registrationno: '25/RP/0602/929068/25', dob: '2010-12-06', rollno: 87},
      {username: '25H0602ROHIT142', name: 'ROHIT BARUAH', registrationno: '25/RP/0602/929020/25', dob: '2011-01-15', rollno: 88},
      {username: '25H0602RUMAN143', name: 'RUMAN AHMED', registrationno: '25/RP/0602/929021/25', dob: '2011-07-20', rollno: 89},
      {username: '25H0602SAHEEN192', name: 'SAHEEN PARVEEN', registrationno: '25/RP/0602/929069/25', dob: '2010-12-06', rollno: 90},
      {username: '25H0602SAHIBA190', name: 'SAHIBA KHATOON', registrationno: '25/RP/0602/929070/25', dob: '2008-08-19', rollno: 91},
      {username: '25H0602SAIBA194', name: 'SAIBA KAUSAR', registrationno: '25/RP/0602/929071/25', dob: '2011-10-10', rollno: 92},
      {username: '25H0602SANCHARI106', name: 'SANCHARI PAUL', registrationno: '25/RP/0602/929072/25', dob: '2011-10-10', rollno: 93},
      {username: '25H0602SANCHITA196', name: 'SANCHITA CHAKRABORTY', registrationno: '25/RP/0602/929073/25', dob: '2011-12-04', rollno: 94},
      {username: '25H0602SAUVIK146', name: 'SAUVIK CHANDA', registrationno: '25/RP/0602/929024/25', dob: '2010-10-12', rollno: 95},
      {username: '25H0602SAYANTANI195', name: 'SAYANTANI DEB', registrationno: '25/RP/0602/929074/25', dob: '2011-02-13', rollno: 96},
      {username: '25H0602SAZID145', name: 'SAZID ALI', registrationno: '25/RP/0602/929022/25', dob: '2010-12-31', rollno: 97},
      {username: '25H0602SHREYANGSHU144', name: 'SHREYANGSHU DAS', registrationno: '25/RP/0602/929032/25', dob: '2010-07-20', rollno: 98},
      {username: '25H0602SHYAMANTIKA198', name: 'SHYAMANTIKA DEB', registrationno: '25/RP/0602/929075/25', dob: '2010-09-02', rollno: 99},
      {username: '25H0602SIDDHI197', name: 'SIDDHI SHARMA', registrationno: '25/RP/0602/929076/25', dob: '2010-12-05', rollno: 100},
      {username: '25H0602SIMRA200', name: 'SIMRA MAHAJABI QURESHI', registrationno: '25/RP/0602/929077/25', dob: '2009-08-23', rollno: 101},
      {username: '25H0602SONAKSHI199', name: 'SONAKSHI CHOUDHURI', registrationno: '25/RP/0602/929078/25', dob: '2011-01-31', rollno: 102},
      {username: '25H0602SUBHAM148', name: 'SUBHAM DEBNATH', registrationno: '25/RP/0602/929023/25', dob: '2010-12-04', rollno: 103},
      {username: '25H0602SUMI201', name: 'SUMI DEB', registrationno: '25/RP/0602/929079/25', dob: '2010-08-07', rollno: 104},
      {username: '25H0602SUPARNA203', name: 'SUPARNA DEY', registrationno: '25/RP/0602/929080/25', dob: '2011-01-30', rollno: 105},
      {username: '25H0602SWETA107', name: 'SWETA KUMARI', registrationno: '25/RP/0602/929081/25', dob: '2011-09-28', rollno: 106},
      {username: '25H0602TANU106', name: 'TANU KUMARI CHAUHAN', registrationno: '25/RP/0602/929082/25', dob: '2009-02-16', rollno: 107},
      {username: '25H0602TANUSHRI106', name: 'TANUSHRI BHATTACHARJEE', registrationno: '25/RP/0602/929083/25', dob: '2010-09-27', rollno: 108},
      {username: '25H0602TONMOY151', name: 'TONMOY BHATTACHARJEE', registrationno: '25/RP/0602/929025/25', dob: '2010-06-02', rollno: 109},
      {username: '25H0602TONMOY152', name: 'TONMOY BISWAS', registrationno: '25/RP/0602/929026/25', dob: '2010-08-17', rollno: 110},
      {username: '25H0602TUHIN153', name: 'TUHIN BOSE', registrationno: '25/RP/0602/929027/25', dob: '2011-06-29', rollno: 111},
      {username: '25H0602TUSHAR155', name: 'TUSHAR BOSE', registrationno: '25/RP/0602/929028/25', dob: '2011-06-29', rollno: 112},
      {username: '25H0602URAJ159', name: 'URAJ SHAH', registrationno: '25/RP/0602/929029/25', dob: '2008-11-22', rollno: 113},
      {username: '25H0602VISHAL154', name: 'VISHAL KR VERMA', registrationno: '25/RP/0602/929030/25', dob: '2008-02-22', rollno: 114},
      {username: '25H0602YUGITA106', name: 'YUGITA SINGH', registrationno: '25/RP/0602/929084/25', dob: '2010-11-09', rollno: 115}
    ];


            allStudents.forEach(student => {
                studentsData[student.username] = {
                    roll_no: student.roll_no,
                    name: student.name,
                    username: student.username,
                    registration_no: student.registration_no,
                    dob: student.dob,
                    password: 'changeme',
                    mil_subject: (student.roll_no % 2 === 0) ? 'Hindi' : 'Assamese',
                    elective_subject: ['Computer', 'E-commerce', 'Advanced Geography'][student.roll_no % 3],
                    marks: { unit_test_1: {}, half_yearly: {}, unit_test_2: {}, annual: {} }
                };
            });
            
            console.log(`Initialized ${allStudents.length} students successfully!`);
        }
        
        // Initialize all 115 students on page load
        initializeAllStudents();

        const teachersData = {
            'TCH001': {
                name: 'Class 9 Teacher',
                password: 'hcstskteachers',
                designation: 'Class 9 Teacher',
                class: '9'
            }
        };



        // Subject names mapping for display
        const subjectNames = {
            moral_science: 'Moral Science',
            english_1: 'English Language',
            english_2: 'English Literature',
            mathematics: 'Mathematics',
            creative_science: 'Science',
            social_science: 'Social Science',
            hindi: 'Hindi',
            assamese: 'Assamese',
            computer: 'Computer',
            advanced_geography: 'Advanced Geography'
        };
        
        // Weightage for calculation
        const weightage = {
            unit_test: 20,
            half_yearly: 30,
            annual: 50
        };

        // Application Data from JSON specifications
        const schoolInfo = {
            name: 'Holy Child Higher Secondary School',
            address: 'New Court Road P.O, Hijuguri - 786192, Tinsukia, Assam',
            phone: '6002978870',
            email: 'HolyChildschooltsk@gmail.com',
            academic_year: '2025-2026'
        };



        let currentUser = null;
        let currentUserType = null;
        let currentStudentMarks = {};

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - Initializing application...');
            showLoginPage();
            setupEventListeners();
            
            // Set initial state
            switchTab('student'); // Default to student tab
            switchStudentLoginTab('registration'); // Default to registration login
            
            console.log('Application initialized successfully');
        });

        function setupEventListeners() {
            console.log('Setting up event listeners...');
            
            // Registration login form
            const regForm = document.getElementById('registrationLogin');
            if (regForm) {
                regForm.addEventListener('submit', function(e) {
                    console.log('Registration form submitted');
                    e.preventDefault();
                    const regNo = document.getElementById('registrationNo').value.trim();
                    const dob = document.getElementById('dobLogin').value;
                    console.log('Attempting login with:', regNo, dob);
                    authenticateStudentByRegistration(regNo, dob);
                });
            }
            
            // Username login form
            const userForm = document.getElementById('usernameLogin');
            if (userForm) {
                userForm.addEventListener('submit', function(e) {
                    console.log('Username form submitted');
                    e.preventDefault();
                    const username = document.getElementById('studentUsername').value.trim();
                    const password = document.getElementById('studentPassword').value;
                    console.log('Attempting login with username:', username);
                    authenticateStudentByUsername(username, password);
                });
            }

            // Teacher login form
            const teacherForm = document.getElementById('teacherLogin');
            if (teacherForm) {
                teacherForm.addEventListener('submit', function(e) {
                    console.log('Teacher form submitted');
                    e.preventDefault();
                    const teacherId = document.getElementById('teacherId').value.trim();
                    const password = document.getElementById('teacherPassword').value;
                    console.log('Attempting teacher login:', teacherId);
                    authenticateTeacher(teacherId, password);
                });
            }
            
            // Student password change form
            const studentPasswordForm = document.getElementById('studentPasswordChangeForm');
            if (studentPasswordForm) {
                studentPasswordForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    changeStudentPassword();
                });
            }
            
            // Teacher password change form
            const teacherPasswordForm = document.getElementById('teacherPasswordChangeForm');
            if (teacherPasswordForm) {
                teacherPasswordForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    changeTeacherPassword();
                });
            }
            

            
            // Add input listeners for password validation
            setTimeout(() => {
                // Student password fields
                const studentCurrent = document.getElementById('studentCurrentPassword');
                const studentNew = document.getElementById('studentNewPassword');
                const studentConfirm = document.getElementById('studentConfirmPassword');
                
                if (studentCurrent) {
                    studentCurrent.addEventListener('input', updateStudentPasswordButton);
                }
                
                // Teacher password fields
                const teacherCurrent = document.getElementById('teacherCurrentPassword');
                const teacherNew = document.getElementById('teacherNewPassword');
                const teacherConfirm = document.getElementById('teacherConfirmPassword');
                
                if (teacherCurrent) {
                    teacherCurrent.addEventListener('input', updateTeacherPasswordButton);
                }
            }, 100);
            
            // Marks entry form
            const marksForm = document.getElementById('marksEntryForm');
            if (marksForm) {
                marksForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    saveStudentMarks();
                });
            }
            
            // Student registration form
            const studentRegForm = document.getElementById('studentRegistrationForm');
            if (studentRegForm) {
                studentRegForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    registerNewStudent();
                });
            }
            
            console.log('Event listeners set up successfully');
        }
        
        function editStudentMarks(studentId) {
            // Switch to edit marks tab and pre-select student
            switchTeacherTab('editmarks');
            // Add a brief delay to allow tab to load
            setTimeout(() => {
                alert(`Edit Marks feature activated!\n\nStudent: ${studentsData[studentId].name}\n\nPlease:\n1. Select the exam phase\n2. Select the subject\n3. Select the student from the list\n4. Edit the existing marks`);
            }, 100);
        }
        
        function updateStudentMarks() {
            const formData = new FormData(document.getElementById('editMarksEntryForm'));
            const marks = {};
            
            // Process marks based on subject type (same logic as save but for updating)
            if (editSelectedSubjectType === 'science') {
                // Combine Physics, Chemistry, Biology marks
                const physicsDesc = parseInt(formData.get('physics_desc')) || 0;
                const physicsOmr = parseInt(formData.get('physics_omr')) || 0;
                const physicsInternal = parseInt(formData.get('physics_internal')) || 0;
                
                const chemistryDesc = parseInt(formData.get('chemistry_desc')) || 0;
                const chemistryOmr = parseInt(formData.get('chemistry_omr')) || 0;
                const chemistryInternal = parseInt(formData.get('chemistry_internal')) || 0;
                
                const biologyDesc = parseInt(formData.get('biology_desc')) || 0;
                const biologyOmr = parseInt(formData.get('biology_omr')) || 0;
                const biologyInternal = parseInt(formData.get('biology_internal')) || 0;
                
                // Combine marks automatically
                marks.descriptive = physicsDesc + chemistryDesc + biologyDesc;
                marks.omr = physicsOmr + chemistryOmr + biologyOmr;
                marks.internal = physicsInternal + chemistryInternal + biologyInternal;
                
                // Store individual breakdown for viewing
                marks.breakdown = {
                    physics: { descriptive: physicsDesc, omr: physicsOmr, internal: physicsInternal },
                    chemistry: { descriptive: chemistryDesc, omr: chemistryOmr, internal: chemistryInternal },
                    biology: { descriptive: biologyDesc, omr: biologyOmr, internal: biologyInternal }
                };
            } else {
                // Standard mark collection
                for (let [key, value] of formData.entries()) {
                    marks[key] = parseInt(value) || 0;
                }
            }
            
            // Get the subject key based on student's choices
            let subjectKey = editSelectedSubjectType;
            if (editSelectedSubjectType === 'mathematics') subjectKey = 'maths';
            if (editSelectedSubjectType === 'mil') {
                subjectKey = 'mil';
            } else if (editSelectedSubjectType === 'elective') {
                subjectKey = 'elective';
            }
            
            // Update marks for selected exam
            if (editSelectedExamType === 'ut1' || editSelectedExamType === 'ut2') {
                // Unit tests - only descriptive
                studentsData[editSelectedStudentId].marks[editSelectedExamType][subjectKey] = marks.descriptive;
            } else {
                // Half yearly or Annual - full marks with breakdown if science
                studentsData[editSelectedStudentId].marks[editSelectedExamType][subjectKey] = marks;
            }
            
            alert(`Marks updated successfully for ${studentsData[editSelectedStudentId].name}!\n\nExam: ${exams[editSelectedExamType].name}\nSubject: ${getSubjectDisplayName(editSelectedSubjectType)}\n\nChanges have been saved.`);
            
            // Reset wizard for next entry
            resetEditMarksWizard();
        }
        
        function saveStudentMarks() {
            const formData = new FormData(document.getElementById('marksEntryForm'));
            const marks = {};
            
            // Process marks based on subject type
            if (selectedSubjectType === 'science') {
                // Combine Physics, Chemistry, Biology marks
                const physicsDesc = parseInt(formData.get('physics_desc')) || 0;
                const physicsOmr = parseInt(formData.get('physics_omr')) || 0;
                const physicsInternal = parseInt(formData.get('physics_internal')) || 0;
                
                const chemistryDesc = parseInt(formData.get('chemistry_desc')) || 0;
                const chemistryOmr = parseInt(formData.get('chemistry_omr')) || 0;
                const chemistryInternal = parseInt(formData.get('chemistry_internal')) || 0;
                
                const biologyDesc = parseInt(formData.get('biology_desc')) || 0;
                const biologyOmr = parseInt(formData.get('biology_omr')) || 0;
                const biologyInternal = parseInt(formData.get('biology_internal')) || 0;
                
                // Combine marks automatically
                marks.descriptive = physicsDesc + chemistryDesc + biologyDesc;
                marks.omr = physicsOmr + chemistryOmr + biologyInternal;
                marks.internal = physicsInternal + chemistryInternal + biologyInternal;
                
                // Store individual breakdown for viewing
                marks.breakdown = {
                    physics: { descriptive: physicsDesc, omr: physicsOmr, internal: physicsInternal },
                    chemistry: { descriptive: chemistryDesc, omr: chemistryOmr, internal: chemistryInternal },
                    biology: { descriptive: biologyDesc, omr: biologyOmr, internal: biologyInternal }
                };
            } else {
                // Standard mark collection
                for (let [key, value] of formData.entries()) {
                    marks[key] = parseInt(value) || 0;
                }
            }
            
            // Get the subject key based on student's choices
            let subjectKey = selectedSubjectType;
            if (selectedSubjectType === 'mil') {
                subjectKey = studentsData[selectedStudentId].mil_choice;
            } else if (selectedSubjectType === 'elective') {
                subjectKey = studentsData[selectedStudentId].elective_choice;
            }
            
            // Initialize marks object if doesn't exist
            if (!studentsData[selectedStudentId].marks) {
                studentsData[selectedStudentId].marks = {};
            }
            if (!studentsData[selectedStudentId].marks[subjectKey]) {
                studentsData[selectedStudentId].marks[subjectKey] = {};
            }
            
            // Save marks for selected exam
            if (selectedExamType === 'ut1' || selectedExamType === 'ut2') {
                // Unit tests - only descriptive
                studentsData[selectedStudentId].marks[subjectKey][selectedExamType] = marks.descriptive;
            } else {
                // Half yearly or Annual - full marks with breakdown if science
                studentsData[selectedStudentId].marks[subjectKey][selectedExamType] = marks;
            }
            
            // Validate section-wise passing criteria
            const validationResult = validateMarks(marks, selectedSubjectType, selectedExamType);
            
            if (!validationResult.valid) {
                alert('Warning: Some marks are below passing criteria:\n' + validationResult.warnings.join('\n'));
            }
            
            alert(`Marks saved successfully for ${studentsData[selectedStudentId].name}!\n\nExam: ${exams[selectedExamType].name}\nSubject: ${getSubjectDisplayName(selectedSubjectType)}`);
            
            // Reset wizard for next entry
            resetMarksWizard();
        }
        
        function validateMarks(marks, subjectType, examType) {
            const warnings = [];
            let valid = true;
            
            if (examType === 'hy' || examType === 'annual') {
                if (subjectType === 'english' || subjectType === 'mathematics' || subjectType === 'social' || subjectType === 'science') {
                    if (marks.descriptive < passingCriteria.descriptive_min) {
                        warnings.push(`Descriptive marks (${marks.descriptive}/45) below minimum (${passingCriteria.descriptive_min})`);
                        valid = false;
                    }
                    if (marks.omr < passingCriteria.omr_min) {
                        warnings.push(`OMR marks (${marks.omr}/45) below minimum (${passingCriteria.omr_min})`);
                        valid = false;
                    }
                    if (marks.internal < passingCriteria.internal_min) {
                        warnings.push(`Internal marks (${marks.internal}/10) below minimum (${passingCriteria.internal_min})`);
                        valid = false;
                    }
                } else if (subjectType === 'mil') {
                    if (marks.descriptive < passingCriteria.mil_descriptive_min) {
                        warnings.push(`MIL Descriptive marks (${marks.descriptive}/100) below minimum (${passingCriteria.mil_descriptive_min})`);
                        valid = false;
                    }
                } else if (subjectType === 'elective') {
                    if (marks.descriptive < passingCriteria.elective_descriptive_min) {
                        warnings.push(`Elective Descriptive marks (${marks.descriptive}/70) below minimum (${passingCriteria.elective_descriptive_min})`);
                        valid = false;
                    }
                    if (marks.internal < passingCriteria.elective_internal_min) {
                        warnings.push(`Elective Internal marks (${marks.internal}/30) below minimum (${passingCriteria.elective_internal_min})`);
                        valid = false;
                    }
                }
            }
            
            return { valid, warnings };
        }

        function switchTab(tabType) {
            console.log('Switching tab to:', tabType);
            
            document.querySelectorAll('.login-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.login-form').forEach(form => form.classList.remove('active'));
            
            if (tabType === 'student') {
                document.querySelector('[onclick="switchTab(\'student\')"]').classList.add('active');
                // Show student login subtabs
                document.querySelector('.login-subtabs').style.display = 'flex';
                // Show default registration form
                document.getElementById('registrationLogin').classList.add('active');
            } else {
                document.querySelector('[onclick="switchTab(\'teacher\')"]').classList.add('active');
                // Hide student login subtabs
                document.querySelector('.login-subtabs').style.display = 'none';
                document.getElementById('teacherLogin').classList.add('active');
            }
        }

        function switchStudentLoginTab(tabType) {
            console.log('Switching student login tab to:', tabType);
            
            document.querySelectorAll('.login-subtab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.login-form').forEach(form => form.classList.remove('active'));
            
            if (tabType === 'registration') {
                document.querySelector('[onclick="switchStudentLoginTab(\'registration\')"]').classList.add('active');
                document.getElementById('registrationLogin').classList.add('active');
            } else {
                document.querySelector('[onclick="switchStudentLoginTab(\'username\')"]').classList.add('active');
                document.getElementById('usernameLogin').classList.add('active');
            }
        }

        function authenticateStudentByRegistration(regNo, dob) {
            console.log('Authenticating by registration:', regNo, dob);
            
            // Find student by registration number and DOB
            const student = Object.values(studentsData).find(s => {
                console.log('Checking student:', s.registration_no, s.dob);
                return s.registration_no === regNo && s.dob === dob;
            });
            
            console.log('Found student:', student);
            
            if (student) {
                currentUser = student;
                currentUserType = 'student';
                console.log('Login successful for:', student.name, '- showing dashboard');
                showStudentDashboard();
            } else {
                alert('Invalid credentials. Please try again.');
            }
        }

        function authenticateStudentByUsername(username, password) {
            console.log('Authenticating by username:', username);
            console.log('Available students:', Object.keys(studentsData).length, 'total students');
            
            if (studentsData[username] && studentsData[username].password === password) {
                currentUser = studentsData[username];
                currentUserType = 'student';
                console.log('Username login successful for:', currentUser.name);
                showStudentDashboard();
            } else {
                alert('Invalid credentials. Please try again.');
            }
        }

        function authenticateTeacher(teacherId, password) {
            console.log('Authenticating teacher:', teacherId);
            console.log('Available teachers:', Object.keys(teachersData));
            
            if (teachersData[teacherId] && teachersData[teacherId].password === password) {
                currentUser = teachersData[teacherId];
                currentUserType = 'teacher';
                console.log('Teacher login successful - Class 9 Teacher');
                showTeacherDashboard();
            } else {
                alert('Invalid credentials. Please try again.');
            }
        }
        
        // Global variables for marks entry wizard
        let selectedExamType = null;
        let selectedSubjectType = null;
        let selectedStudentId = null;
        
        // Global variables for edit marks wizard
        let editSelectedExamType = null;
        let editSelectedSubjectType = null;
        let editSelectedStudentId = null;
        
        // Marks entry wizard functions
        function selectExam(examType) {
            selectedExamType = examType;
            document.getElementById('selectedExam').textContent = exams[examType].name;
            
            // Move to next step
            document.getElementById('examStep').classList.remove('active');
            document.getElementById('subjectStep').classList.add('active');
        }
        
        function selectSubject(subjectType) {
            selectedSubjectType = subjectType;
            document.getElementById('selectedSubject').textContent = getSubjectDisplayName(subjectType);
            
            // Populate students list
            populateStudentsList();
            
            // Move to next step
            document.getElementById('subjectStep').classList.remove('active');
            document.getElementById('studentStep').classList.add('active');
        }
        
        function selectStudent(studentId) {
            selectedStudentId = studentId;
            const student = studentsData[studentId];
            document.getElementById('selectedStudent').textContent = `${student.name} (${student.username})`;
            
            // Generate marks input form
            generateMarksInputForm();
            
            // Move to final step
            document.getElementById('studentStep').classList.remove('active');
            document.getElementById('marksEntryStep').classList.add('active');
        }
        
        function populateStudentsList() {
            const studentsList = document.getElementById('studentsList');
            if (!studentsList) {
                console.log('Students list element not found');
                return;
            }
            
            studentsList.innerHTML = '';
            
            Object.keys(studentsData).forEach(studentId => {
                const student = studentsData[studentId];
                const div = document.createElement('div');
                div.className = 'student-item';
                div.innerHTML = `
                    <div class="student-info">
                        <h4>${student.name}</h4>
                        <p>Username: ${student.username}</p>
                        <p>Registration: ${student.registration_no}</p>
                    </div>
                    <button class="btn btn--sm btn-primary" onclick="selectStudent('${studentId}')">
                        Select
                    </button>
                `;
                studentsList.appendChild(div);
            });
        }
        
        function filterStudents() {
            const searchTerm = document.getElementById('studentSearchInput').value.toLowerCase();
            const studentItems = document.querySelectorAll('.student-item');
            
            studentItems.forEach(item => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(searchTerm) ? 'flex' : 'none';
            });
        }
        
        function generateMarksInputForm() {
            const marksInputs = document.getElementById('marksInputs');
            marksInputs.innerHTML = '';
            
            // Generate input fields based on exam type and subject type
            if (selectedExamType === 'ut1' || selectedExamType === 'ut2') {
                // Unit tests - only descriptive marks
                const maxMarks = selectedSubjectType === 'mil' ? 50 : 50;
                marksInputs.innerHTML = `
                    <div class="marks-input-group">
                        <label>Descriptive Marks (out of ${maxMarks}):</label>
                        <input type="number" name="descriptive" min="0" max="${maxMarks}" required>
                    </div>
                `;
            } else {
                // Half Yearly or Annual - full marking scheme
                generateFullMarksForm();
            }
        }
        
        function generateFullMarksForm() {
            const marksInputs = document.getElementById('marksInputs');
            
            if (selectedSubjectType === 'english' || selectedSubjectType === 'mathematics' || selectedSubjectType === 'social') {
                // Standard subjects: Descriptive (45) + OMR (45) + Internal (10)
                marksInputs.innerHTML = `
                    <div class="marks-grid">
                        <div class="marks-input-group">
                            <label>Descriptive (out of 45):</label>
                            <input type="number" name="descriptive" min="0" max="45" required>
                        </div>
                        <div class="marks-input-group">
                            <label>OMR (out of 45):</label>
                            <input type="number" name="omr" min="0" max="45" required>
                        </div>
                        <div class="marks-input-group">
                            <label>Internal Assessment (out of 10):</label>
                            <input type="number" name="internal" min="0" max="10" required>
                        </div>
                    </div>
                `;
            } else if (selectedSubjectType === 'science') {
                // Science: Separate entries for Physics, Chemistry, Biology
                marksInputs.innerHTML = `
                    <div class="science-marks">
                        <h4>Physics:</h4>
                        <div class="marks-grid">
                            <input type="number" name="physics_desc" placeholder="Descriptive" min="0" max="15" required>
                            <input type="number" name="physics_omr" placeholder="OMR" min="0" max="15" required>
                            <input type="number" name="physics_internal" placeholder="Internal" min="0" max="3" required>
                        </div>
                        
                        <h4>Chemistry:</h4>
                        <div class="marks-grid">
                            <input type="number" name="chemistry_desc" placeholder="Descriptive" min="0" max="15" required>
                            <input type="number" name="chemistry_omr" placeholder="OMR" min="0" max="15" required>
                            <input type="number" name="chemistry_internal" placeholder="Internal" min="0" max="3" required>
                        </div>
                        
                        <h4>Biology:</h4>
                        <div class="marks-grid">
                            <input type="number" name="biology_desc" placeholder="Descriptive" min="0" max="15" required>
                            <input type="number" name="biology_omr" placeholder="OMR" min="0" max="15" required>
                            <input type="number" name="biology_internal" placeholder="Internal" min="0" max="4" required>
                        </div>
                        
                        <div class="science-total" style="margin-top: var(--space-16); padding: var(--space-12); background: var(--color-bg-1); border-radius: var(--radius-base);">
                            <p><strong>System will automatically combine:</strong></p>
                            <p>Total Descriptive: Physics + Chemistry + Biology = 45 marks</p>
                            <p>Total OMR: Physics + Chemistry + Biology = 45 marks</p>
                            <p>Total Internal: Physics + Chemistry + Biology = 10 marks</p>
                        </div>
                    </div>
                `;
            } else if (selectedSubjectType === 'mil') {
                // MIL: Descriptive only (100 marks)
                marksInputs.innerHTML = `
                    <div class="marks-input-group">
                        <label>Descriptive (out of 100):</label>
                        <input type="number" name="descriptive" min="0" max="100" required>
                    </div>
                `;
            } else if (selectedSubjectType === 'elective') {
                // Elective: Descriptive (70) + Internal (30)
                marksInputs.innerHTML = `
                    <div class="marks-grid">
                        <div class="marks-input-group">
                            <label>Descriptive (out of 70):</label>
                            <input type="number" name="descriptive" min="0" max="70" required>
                        </div>
                        <div class="marks-input-group">
                            <label>Internal Assessment (out of 30):</label>
                            <input type="number" name="internal" min="0" max="30" required>
                        </div>
                    </div>
                `;
            }
        }
        
        function resetMarksWizard() {
            // Reset all selections
            selectedExamType = null;
            selectedSubjectType = null;
            selectedStudentId = null;
            
            // Reset wizard steps
            document.querySelectorAll('.wizard-step').forEach(step => step.classList.remove('active'));
            document.getElementById('examStep').classList.add('active');
            
            // Clear forms
            document.getElementById('marksEntryForm').reset();
        }
        
        // Edit Marks Functions
        function selectEditExam(examType) {
            editSelectedExamType = examType;
            document.getElementById('editSelectedExam').textContent = exams[examType].name;
            
            // Move to next step
            document.getElementById('editExamStep').classList.remove('active');
            document.getElementById('editSubjectStep').classList.add('active');
        }
        
        function selectEditSubject(subjectType) {
            editSelectedSubjectType = subjectType;
            document.getElementById('editSelectedSubject').textContent = getSubjectDisplayName(subjectType);
            
            // Populate students list with only those who have marks for this exam/subject
            populateEditStudentsList();
            
            // Move to next step
            document.getElementById('editSubjectStep').classList.remove('active');
            document.getElementById('editStudentStep').classList.add('active');
        }
        
        function selectEditStudent(studentId) {
            editSelectedStudentId = studentId;
            const student = studentsData[studentId];
            document.getElementById('editSelectedStudent').textContent = `${student.name} (${student.username})`;
            
            // Generate edit marks form with existing values
            generateEditMarksInputForm();
            
            // Move to final step
            document.getElementById('editStudentStep').classList.remove('active');
            document.getElementById('editMarksEntryStep').classList.add('active');
        }
        
        function populateEditStudentsList() {
            const editStudentsList = document.getElementById('editStudentsList');
            if (!editStudentsList) {
                console.log('Edit students list element not found');
                return;
            }
            
            editStudentsList.innerHTML = '';
            let studentsWithMarks = 0;
            
            Object.keys(studentsData).forEach(studentId => {
                const student = studentsData[studentId];
                
                // Check if student has marks for selected exam and subject
                if (hasMarksForExamSubject(student, editSelectedExamType, editSelectedSubjectType)) {
                    studentsWithMarks++;
                    const div = document.createElement('div');
                    div.className = 'student-item';
                    div.innerHTML = `
                        <div class="student-info">
                            <h4>${student.name}</h4>
                            <p>Username: ${student.username}</p>
                            <p>Registration: ${student.registration_no}</p>
                            <p style="color: var(--color-success); font-size: var(--font-size-sm);"><i class="fas fa-check"></i> Has marks for this exam/subject</p>
                        </div>
                        <button class="btn btn--sm btn-primary" onclick="selectEditStudent('${studentId}')">
                            Edit Marks
                        </button>
                    `;
                    editStudentsList.appendChild(div);
                }
            });
            
            if (studentsWithMarks === 0) {
                editStudentsList.innerHTML = `
                    <div class="no-marks" style="text-align: center; padding: var(--space-24); color: var(--color-text-secondary);">
                        <i class="fas fa-info-circle" style="font-size: 2rem; margin-bottom: var(--space-8); color: var(--color-info);"></i>
                        <p>No students have marks entered for ${exams[editSelectedExamType].name} - ${getSubjectDisplayName(editSelectedSubjectType)} yet.</p>
                        <p>Use "Enter Marks" to add marks first, then return here to edit them.</p>
                    </div>
                `;
            }
        }
        
        function hasMarksForExamSubject(student, examType, subjectType) {
            if (!student.marks || !student.marks[examType]) return false;
            
            const examMarks = student.marks[examType];
            
            // Map subject types to actual keys
            let subjectKey = subjectType;
            if (subjectType === 'mathematics') subjectKey = 'maths';
            
            return examMarks[subjectKey] !== undefined && examMarks[subjectKey] !== null;
        }
        
        function generateEditMarksInputForm() {
            const editMarksInputs = document.getElementById('editMarksInputs');
            editMarksInputs.innerHTML = '';
            
            // Get existing marks
            const student = studentsData[editSelectedStudentId];
            const existingMarks = student.marks[editSelectedExamType];
            let subjectKey = editSelectedSubjectType;
            if (editSelectedSubjectType === 'mathematics') subjectKey = 'maths';
            
            const subjectMarks = existingMarks[subjectKey];
            
            // Generate input fields based on exam type and subject type (same logic as regular entry)
            if (editSelectedExamType === 'ut1' || editSelectedExamType === 'ut2') {
                // Unit tests - only descriptive marks
                const currentValue = typeof subjectMarks === 'number' ? subjectMarks : '';
                const maxMarks = editSelectedSubjectType === 'mil' ? 50 : 50;
                editMarksInputs.innerHTML = `
                    <div class="marks-input-group">
                        <label>Descriptive Marks (out of ${maxMarks}):</label>
                        <input type="number" name="descriptive" min="0" max="${maxMarks}" value="${currentValue}" required>
                        <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current value: ${currentValue || 'Not entered'}</small>
                    </div>
                `;
            } else {
                // Half Yearly or Annual - full marking scheme with existing values
                generateEditFullMarksForm(subjectMarks);
            }
        }
        
        function generateEditFullMarksForm(existingMarks) {
            const editMarksInputs = document.getElementById('editMarksInputs');
            
            if (editSelectedSubjectType === 'english' || editSelectedSubjectType === 'mathematics' || editSelectedSubjectType === 'social') {
                // Standard subjects: Descriptive (45) + OMR (45) + Internal (10)
                const desc = existingMarks?.descriptive || '';
                const omr = existingMarks?.omr || '';
                const internal = existingMarks?.internal || '';
                
                editMarksInputs.innerHTML = `
                    <div class="marks-grid">
                        <div class="marks-input-group">
                            <label>Descriptive (out of 45):</label>
                            <input type="number" name="descriptive" min="0" max="45" value="${desc}" required>
                            <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${desc || 'Not entered'}</small>
                        </div>
                        <div class="marks-input-group">
                            <label>OMR (out of 45):</label>
                            <input type="number" name="omr" min="0" max="45" value="${omr}" required>
                            <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${omr || 'Not entered'}</small>
                        </div>
                        <div class="marks-input-group">
                            <label>Internal Assessment (out of 10):</label>
                            <input type="number" name="internal" min="0" max="10" value="${internal}" required>
                            <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${internal || 'Not entered'}</small>
                        </div>
                    </div>
                `;
            } else if (editSelectedSubjectType === 'science') {
                // Science: Separate entries for Physics, Chemistry, Biology with existing values
                const physDesc = existingMarks?.physics?.descriptive || '';
                const physOmr = existingMarks?.physics?.omr || '';
                const physInt = existingMarks?.physics?.internal || '';
                const chemDesc = existingMarks?.chemistry?.descriptive || '';
                const chemOmr = existingMarks?.chemistry?.omr || '';
                const chemInt = existingMarks?.chemistry?.internal || '';
                const bioDesc = existingMarks?.biology?.descriptive || '';
                const bioOmr = existingMarks?.biology?.omr || '';
                const bioInt = existingMarks?.biology?.internal || '';
                
                editMarksInputs.innerHTML = `
                    <div class="science-marks">
                        <h4>Physics:</h4>
                        <div class="marks-grid">
                            <div>
                                <input type="number" name="physics_desc" placeholder="Descriptive" min="0" max="15" value="${physDesc}" required>
                                <small>Current: ${physDesc || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="physics_omr" placeholder="OMR" min="0" max="15" value="${physOmr}" required>
                                <small>Current: ${physOmr || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="physics_internal" placeholder="Internal" min="0" max="3" value="${physInt}" required>
                                <small>Current: ${physInt || 'Not entered'}</small>
                            </div>
                        </div>
                        
                        <h4>Chemistry:</h4>
                        <div class="marks-grid">
                            <div>
                                <input type="number" name="chemistry_desc" placeholder="Descriptive" min="0" max="15" value="${chemDesc}" required>
                                <small>Current: ${chemDesc || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="chemistry_omr" placeholder="OMR" min="0" max="15" value="${chemOmr}" required>
                                <small>Current: ${chemOmr || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="chemistry_internal" placeholder="Internal" min="0" max="3" value="${chemInt}" required>
                                <small>Current: ${chemInt || 'Not entered'}</small>
                            </div>
                        </div>
                        
                        <h4>Biology:</h4>
                        <div class="marks-grid">
                            <div>
                                <input type="number" name="biology_desc" placeholder="Descriptive" min="0" max="15" value="${bioDesc}" required>
                                <small>Current: ${bioDesc || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="biology_omr" placeholder="OMR" min="0" max="15" value="${bioOmr}" required>
                                <small>Current: ${bioOmr || 'Not entered'}</small>
                            </div>
                            <div>
                                <input type="number" name="biology_internal" placeholder="Internal" min="0" max="4" value="${bioInt}" required>
                                <small>Current: ${bioInt || 'Not entered'}</small>
                            </div>
                        </div>
                        
                        <div class="science-total" style="margin-top: var(--space-16); padding: var(--space-12); background: var(--color-bg-1); border-radius: var(--radius-base);">
                            <p><strong>System will automatically combine the updated marks</strong></p>
                        </div>
                    </div>
                `;
            } else if (editSelectedSubjectType === 'mil') {
                // MIL: Descriptive only (100 marks)
                const desc = existingMarks?.descriptive || '';
                editMarksInputs.innerHTML = `
                    <div class="marks-input-group">
                        <label>Descriptive (out of 100):</label>
                        <input type="number" name="descriptive" min="0" max="100" value="${desc}" required>
                        <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${desc || 'Not entered'}</small>
                    </div>
                `;
            } else if (editSelectedSubjectType === 'elective') {
                // Elective: Descriptive (70) + Internal (30)
                const desc = existingMarks?.descriptive || '';
                const internal = existingMarks?.internal || '';
                editMarksInputs.innerHTML = `
                    <div class="marks-grid">
                        <div class="marks-input-group">
                            <label>Descriptive (out of 70):</label>
                            <input type="number" name="descriptive" min="0" max="70" value="${desc}" required>
                            <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${desc || 'Not entered'}</small>
                        </div>
                        <div class="marks-input-group">
                            <label>Internal Assessment (out of 30):</label>
                            <input type="number" name="internal" min="0" max="30" value="${internal}" required>
                            <small style="color: var(--color-info); display: block; margin-top: var(--space-4);">Current: ${internal || 'Not entered'}</small>
                        </div>
                    </div>
                `;
            }
        }
        
        function filterEditStudents() {
            const searchTerm = document.getElementById('editStudentSearchInput').value.toLowerCase();
            const studentItems = document.querySelectorAll('#editStudentsList .student-item');
            
            studentItems.forEach(item => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(searchTerm) ? 'flex' : 'none';
            });
        }
        
        function resetEditMarksWizard() {
            // Reset all selections
            editSelectedExamType = null;
            editSelectedSubjectType = null;
            editSelectedStudentId = null;
            
            // Reset wizard steps
            document.querySelectorAll('#editmarksTab .wizard-step').forEach(step => step.classList.remove('active'));
            document.getElementById('editExamStep').classList.add('active');
            
            // Clear forms
            document.getElementById('editMarksEntryForm').reset();
        }

        function showLoginPage() {
            document.getElementById('loginPage').style.display = 'flex';
            document.getElementById('studentDashboard').classList.remove('active');
            document.getElementById('teacherDashboard').classList.remove('active');
        }

        function showStudentDashboard() {
            console.log('Showing student dashboard for:', currentUser.name);
            document.getElementById('loginPage').style.display = 'none';
            document.getElementById('studentDashboard').classList.add('active');
            
            // Update student info
            document.getElementById('studentName').textContent = currentUser.name;
            document.getElementById('studentDetails').textContent = `Roll: ${currentUser.roll_no} | Username: ${currentUser.username} | Class: 9A`;
            document.getElementById('studentAvatar').textContent = currentUser.name.charAt(0);
            
            // Auto-generate results for current student
            generateCompleteStudentReport();
        }
        
        function switchStudentTab(tabName) {
            // Remove active class from all tabs and content
            document.querySelectorAll('.student-nav-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.student-tab-content').forEach(content => content.classList.remove('active'));
            
            // Add active class to selected tab and content
            document.querySelector(`[onclick="switchStudentTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`${tabName}Tab`).classList.add('active');
        }
        
        function generateCompleteStudentReport() {
            if (!currentUser || !currentUser.marks) {
                displayNoOfficialResults();
                hideCharts();
                return;
            }
            
            // Check if student has any marks entered
            const hasMarks = checkIfStudentHasMarks(currentUser.marks);
            
            if (hasMarks) {
                displayOfficialResults();
                showCharts();
                generateStudentChartsFromMarks();
            } else {
                displayNoOfficialResults();
                hideCharts();
            }
            
            // Set up subject names based on student's choices
            if (currentUser.mil_subject) {
                document.getElementById('milSubjectName').textContent = currentUser.mil_subject;
            }
            if (currentUser.elective_subject) {
                document.getElementById('electiveSubjectName').textContent = currentUser.elective_subject;
            }
        }
        
        function showCharts() {
            const chartsContent = document.getElementById('chartsContent');
            const noChartsMessage = document.getElementById('noChartsMessage');
            if (chartsContent) chartsContent.style.display = 'block';
            if (noChartsMessage) noChartsMessage.style.display = 'none';
        }
        
        function hideCharts() {
            const chartsContent = document.getElementById('chartsContent');
            const noChartsMessage = document.getElementById('noChartsMessage');
            if (chartsContent) chartsContent.style.display = 'none';
            if (noChartsMessage) noChartsMessage.style.display = 'block';
        }
        
        function generateStudentChartsFromMarks() {
            // Extract actual marks data for charts
            const marks = currentUser.marks;
            const subjectMarks = {
                english: 0,
                mathematics: 0,
                social: 0,
                science: 0,
                mil: 0,
                elective: 0
            };
            
            // Calculate final marks for each subject based on weightage
            ['english', 'maths', 'social', 'science', 'mil', 'elective'].forEach(subject => {
                let totalMarks = 0;
                let examCount = 0;
                
                Object.keys(marks).forEach(examType => {
                    if (marks[examType] && marks[examType][subject] !== undefined) {
                        examCount++;
                        if (typeof marks[examType][subject] === 'number') {
                            // Unit test
                            totalMarks += (marks[examType][subject] / 50) * 100 * (exams[examType]?.weightage || 10) / 100;
                        } else if (typeof marks[examType][subject] === 'object') {
                            // Full exam
                            let subjectTotal = 0;
                            if (subject === 'science' && marks[examType][subject].combined) {
                                subjectTotal = marks[examType][subject].combined.descriptive + 
                                              marks[examType][subject].combined.omr + 
                                              marks[examType][subject].combined.internal;
                            } else if (subject === 'mil') {
                                subjectTotal = marks[examType][subject].descriptive;
                            } else if (subject === 'elective') {
                                subjectTotal = marks[examType][subject].descriptive + (marks[examType][subject].internal || 0);
                            } else {
                                subjectTotal = marks[examType][subject].descriptive + 
                                              marks[examType][subject].omr + 
                                              marks[examType][subject].internal;
                            }
                            totalMarks += subjectTotal * (exams[examType]?.weightage || 30) / 100;
                        }
                    }
                });
                
                const key = subject === 'maths' ? 'mathematics' : subject;
                subjectMarks[key] = Math.round(totalMarks);
            });
            
            // Update current student marks for chart generation
            currentStudentMarks = {
                mathematics: subjectMarks.mathematics,
                science: subjectMarks.science, 
                english: subjectMarks.english,
                social_studies: subjectMarks.social,
                hindi: subjectMarks.mil
            };
            
            // Generate charts
            generateStudentCharts();
        }
        
        function checkIfStudentHasMarks(marks) {
            // Check if any exam has marks entered
            return Object.values(marks).some(exam => {
                if (typeof exam === 'object' && exam !== null) {
                    return Object.keys(exam).length > 0;
                }
                return false;
            });
        }
        
        function displayNoOfficialResults() {
            document.getElementById('officialResultsContent').innerHTML = `
                <div class="no-results" style="text-align: center; padding: var(--space-32); color: var(--color-text-secondary);">
                    <i class="fas fa-clock" style="font-size: 3rem; margin-bottom: var(--space-16); color: var(--color-warning);"></i>
                    <h3>Results Not Published Yet</h3>
                    <p>Your teacher has not entered your marks yet. Please check back later.</p>
                    <p style="margin-top: var(--space-16); font-size: var(--font-size-sm);">You can use the <strong>Sample Calculator</strong> tab to practice calculations with your expected marks.</p>
                </div>
            `;
        }
        
        function displayOfficialResults() {
            const marks = currentUser.marks;
            
            // Professional Report Card Header
            let resultHtml = `
                <div style="text-align: center; margin-bottom: var(--space-32); padding: var(--space-20); border-bottom: 2px solid var(--color-primary);">
                    <h1 style="color: var(--color-primary); margin-bottom: var(--space-8);">HOLY CHILD HIGHER SECONDARY SCHOOL</h1>
                    <p style="margin: var(--space-4) 0; color: var(--color-text-secondary);">New Court Road P.O, Hijuguri - 786192, Tinsukia, Assam</p>
                    <p style="margin: var(--space-4) 0; color: var(--color-text-secondary);">Phone: 6002978870 | Email: HolyChildschooltsk@gmail.com</p>
                    <h2 style="margin: var(--space-16) 0 var(--space-8) 0; color: var(--color-text);">PROGRESS REPORT FOR ACADEMIC YEAR 2025-2026</h2>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: var(--space-32); margin-bottom: var(--space-32); padding: var(--space-16); background: var(--color-bg-1); border-radius: var(--radius-lg);">
                    <div>
                        <p><strong>STUDENT NAME:</strong> ${currentUser.name}</p>
                        <p><strong>CLASS:</strong> IX</p>
                    </div>
                    <div>
                        <p><strong>DATE OF BIRTH:</strong> ${currentUser.dob}</p>
                    </div>
                </div>
                
                <h3 style="margin-bottom: var(--space-16); color: var(--color-primary);">SCHOLASTIC:</h3>
                
                <div class="results-table-container" style="overflow-x: auto; margin-bottom: var(--space-24);">
                    <table class="professional-report-table" style="width: 100%; border-collapse: collapse; font-size: var(--font-size-sm); background: var(--color-surface);">
                        <thead>
                            <tr style="background: var(--color-primary); color: var(--color-btn-primary-text);">
                                <th rowspan="2" style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 100px; vertical-align: middle;">SUBJECT</th>
                                <th colspan="4" style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; background: var(--color-bg-1);">MARKS OBTAINED</th>
                                <th colspan="3" style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; background: var(--color-bg-2);">WEIGHTED MARKS</th>
                                <th rowspan="2" style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px; vertical-align: middle;">TOTAL<br>(100)</th>
                                <th rowspan="2" style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 60px; vertical-align: middle;">GRADE</th>
                            </tr>
                            <tr style="background: var(--color-primary); color: var(--color-btn-primary-text);">
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px;">Unit Test 1</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px;">Unit Test 2</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px;">Half Yearly</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px;">Annual</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px; background: var(--color-bg-3);">Unit Test<br>20%</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px; background: var(--color-bg-2);">Half Yearly<br>30%</th>
                                <th style="border: 2px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; min-width: 80px; background: var(--color-bg-4);">Annual<br>50%</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            // Calculate all weighted marks for each subject
            const subjectsList = [
                { key: 'english', name: 'English' },
                { key: 'maths', name: 'Mathematics' }, 
                { key: 'social', name: 'Social' },
                { key: 'science', name: 'Science', hasBreakdown: true },
                { key: 'mil', name: currentUser.mil_subject || 'MIL' },
                { key: 'elective', name: currentUser.elective_subject || 'Elective' }
            ];
            
            let grandTotalMarks = 0;
            let grandUT1 = 0, grandUT2 = 0, grandHY = 0, grandAnnual = 0;
            let grandWeightedUT = 0, grandWeightedHY = 0, grandWeightedAnn = 0;
            
            subjectsList.forEach(subject => {
                // Get marks for this subject
                const ut1Mark = marks.unit_test_1?.[subject.key] || 0;
                const ut2Mark = marks.unit_test_2?.[subject.key] || 0;
                let hyMark = 0;
                let annMark = 0;
                
                // Calculate HY and Annual marks based on subject type
                if (marks.half_yearly?.[subject.key]) {
                    const hyData = marks.half_yearly[subject.key];
                    if (typeof hyData === 'number') {
                        hyMark = hyData;
                    } else if (typeof hyData === 'object') {
                        if (subject.key === 'science' && hyData.combined) {
                            hyMark = hyData.combined.descriptive + hyData.combined.omr + hyData.combined.internal;
                        } else if (subject.key === 'mil') {
                            hyMark = hyData.descriptive;
                        } else if (subject.key === 'elective') {
                            hyMark = hyData.descriptive + (hyData.internal || 0);
                        } else {
                            hyMark = hyData.descriptive + hyData.omr + hyData.internal;
                        }
                    }
                }
                
                if (marks.annual?.[subject.key]) {
                    const annData = marks.annual[subject.key];
                    if (typeof annData === 'number') {
                        annMark = annData;
                    } else if (typeof annData === 'object') {
                        if (subject.key === 'science' && annData.combined) {
                            annMark = annData.combined.descriptive + annData.combined.omr + annData.combined.internal;
                        } else if (subject.key === 'mil') {
                            annMark = annData.descriptive;
                        } else if (subject.key === 'elective') {
                            annMark = annData.descriptive + (annData.internal || 0);
                        } else {
                            annMark = annData.descriptive + annData.omr + annData.internal;
                        }
                    }
                }
                
                // Calculate weighted marks according to specifications
                const weightedUT = ((ut1Mark + ut2Mark)/100 * 20); // 20% from unit tests combined
                const weightedHY = (hyMark/100 * 30); // 30% from half yearly
                const weightedAnn = (annMark/100 * 50); // 50% from annual
                const totalMarks = weightedUT + weightedHY + weightedAnn;
                
                // Calculate grade
                const grade = totalMarks >= 90 ? 'A+' : totalMarks >= 80 ? 'A' : totalMarks >= 70 ? 'B+' : totalMarks >= 60 ? 'B' : totalMarks >= 50 ? 'C' : totalMarks >= 40 ? 'D' : 'E';
                
                // Add to grand totals
                grandUT1 += ut1Mark;
                grandUT2 += ut2Mark;
                grandHY += hyMark;
                grandAnnual += annMark;
                grandWeightedUT += weightedUT;
                grandWeightedHY += weightedHY;
                grandWeightedAnn += weightedAnn;
                grandTotalMarks += totalMarks;
                
                // Red marking for failed sections
                const ut1Style = ut1Mark > 0 && ut1Mark < 15 ? 'color: var(--color-error); font-weight: bold;' : '';
                const ut2Style = ut2Mark > 0 && ut2Mark < 15 ? 'color: var(--color-error); font-weight: bold;' : '';
                const hyStyle = hyMark > 0 && hyMark < 30 ? 'color: var(--color-error); font-weight: bold;' : '';
                const annStyle = annMark > 0 && annMark < 30 ? 'color: var(--color-error); font-weight: bold;' : '';
                
                resultHtml += `
                    <tr style="border-bottom: 1px solid var(--color-border);">
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); font-weight: bold; background: var(--color-bg-1);">
                            ${subject.name}
                            ${subject.hasBreakdown ? '<br><button class="btn btn--sm" onclick="showScienceBreakdown()" style="margin-top: var(--space-4); font-size: var(--font-size-xs);">View Breakdown</button>' : ''}
                        </td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; ${ut1Style}">${ut1Mark > 0 ? ut1Mark + '/50' : '-'}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; ${ut2Style}">${ut2Mark > 0 ? ut2Mark + '/50' : '-'}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; ${hyStyle}">${hyMark > 0 ? hyMark + '/100' : '-'}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; ${annStyle}">${annMark > 0 ? annMark + '/100' : '-'}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; background: var(--color-bg-3);">${weightedUT.toFixed(1)}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; background: var(--color-bg-2);">${weightedHY.toFixed(1)}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; background: var(--color-bg-4);">${weightedAnn.toFixed(1)}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; font-size: var(--font-size-lg);">${totalMarks.toFixed(1)}</td>
                        <td style="border: 1px solid var(--color-border); padding: var(--space-8); text-align: center; font-weight: bold; color: var(--color-primary);">${grade}</td>
                    </tr>
                `;
            });
            
            // Grand Total Row 
            const grandPercentage = (grandTotalMarks / 600) * 100;
            const overallGrade = grandPercentage >= 90 ? 'A+' : grandPercentage >= 80 ? 'A' : grandPercentage >= 70 ? 'B+' : grandPercentage >= 60 ? 'B' : grandPercentage >= 50 ? 'C' : grandPercentage >= 40 ? 'D' : 'E';
            const overallResult = grandPercentage >= 30 ? 'PASS' : 'FAIL';
            
            resultHtml += `
                        <tr style="background: var(--color-primary); color: var(--color-btn-primary-text); font-weight: bold; font-size: var(--font-size-lg);">
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); font-weight: bold;">GRAND TOTAL</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">-</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">-</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">-</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">-</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">${grandWeightedUT.toFixed(1)}</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">${grandWeightedHY.toFixed(1)}</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center;">${grandWeightedAnn.toFixed(1)}</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center; font-size: var(--font-size-xl);">${grandTotalMarks.toFixed(1)}/600</td>
                            <td style="border: 2px solid var(--color-border); padding: var(--space-12); text-align: center; font-size: var(--font-size-xl);">${overallGrade}</td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            `;
            
            // Result Summary
            resultHtml += `
                <div style="text-align: center; margin: var(--space-32) 0; padding: var(--space-20); background: var(--color-surface); border-radius: var(--radius-lg); border: 2px solid var(--color-primary);">
                    <p style="margin: var(--space-8) 0; font-size: var(--font-size-xl);"><strong>PERCENTAGE: ${grandPercentage.toFixed(1)}%</strong></p>
                </div>
            `;
            
            // Remarks
            const remarks = grandPercentage >= 90 ? 'Outstanding performance! Excellent work.' : 
                           grandPercentage >= 80 ? 'Very good performance. Keep up the excellent work!' :
                           grandPercentage >= 70 ? 'Good performance. Continue working hard.' :
                           grandPercentage >= 60 ? 'Satisfactory performance. Focus on improvement areas.' :
                           grandPercentage >= 30 ? 'Pass but needs significant improvement in weak areas.' :
                           'Fail. Requires immediate attention and additional support.';
            
            resultHtml += `
                <div style="margin: var(--space-24) 0; padding: var(--space-16); background: var(--color-bg-6); border-radius: var(--radius-lg); border-left: 4px solid var(--color-primary);">
                    <p style="margin: 0; margin-bottom: var(--space-12);"><strong>RESULT:</strong> <span class="status status--${grandPercentage >= 30 ? 'success' : 'error'}" style="font-size: var(--font-size-lg); padding: var(--space-8) var(--space-16); border-radius: var(--radius-base);">${overallResult}</span></p>
                    <p style="margin: 0;"><strong>REMARKS:</strong> ${remarks}</p>
                </div>
            `;
            
            document.getElementById('officialResultsContent').innerHTML = resultHtml;
        }
        
        function calculateExamWeightedPercentage(examMarks, examType) {
            if (!examMarks || Object.keys(examMarks).length === 0) return 0;
            
            let totalMarks = 0;
            let subjectCount = 0;
            
            Object.keys(examMarks).forEach(subject => {
                const subjectMark = examMarks[subject];
                if (subjectMark !== undefined) {
                    if (typeof subjectMark === 'number') {
                        // Unit test
                        totalMarks += (subjectMark / 50) * 100;
                        subjectCount++;
                    } else if (typeof subjectMark === 'object') {
                        if (subject === 'science' && subjectMark.combined) {
                            const total = subjectMark.combined.descriptive + subjectMark.combined.omr + subjectMark.combined.internal;
                            totalMarks += total;
                            subjectCount++;
                        } else if (subject === 'mil') {
                            totalMarks += subjectMark.descriptive;
                            subjectCount++;
                        } else if (subject === 'elective') {
                            const total = subjectMark.descriptive + (subjectMark.internal || 0);
                            totalMarks += total;
                            subjectCount++;
                        } else {
                            const total = subjectMark.descriptive + subjectMark.omr + subjectMark.internal;
                            totalMarks += total;
                            subjectCount++;
                        }
                    }
                }
            });
            
            return subjectCount > 0 ? totalMarks / subjectCount : 0;
        }
        
        function calculateFinalPercentage(studentMarks) {
            let finalPercentage = 0;
            
            // Calculate weighted contribution from each exam
            const ut1Percentage = calculateExamWeightedPercentage(studentMarks.unit_test_1, 'unit_test_1');
            const hyPercentage = calculateExamWeightedPercentage(studentMarks.half_yearly, 'half_yearly');
            const ut2Percentage = calculateExamWeightedPercentage(studentMarks.unit_test_2, 'unit_test_2');
            const annualPercentage = calculateExamWeightedPercentage(studentMarks.annual, 'annual');
            
            // Apply weightage: UT1(10%) + UT2(10%) + HY(30%) + Annual(50%)
            finalPercentage = (ut1Percentage * 0.1) + (hyPercentage * 0.3) + (ut2Percentage * 0.1) + (annualPercentage * 0.5);
            
            return finalPercentage;
        }
        
        function showScienceBreakdown() {
            if (!currentUser.marks.half_yearly || !currentUser.marks.half_yearly.science) {
                alert('Science breakdown not available - no marks entered yet.');
                return;
            }
            
            const science = currentUser.marks.half_yearly.science;
            let breakdownHtml = `
                <div style="padding: 20px; max-width: 500px;">
                    <h3 style="text-align: center; margin-bottom: 20px; color: var(--color-primary);">Science Marks Breakdown</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr style="background: var(--color-secondary);">
                                <th style="border: 1px solid var(--color-border); padding: 8px;">Subject</th>
                                <th style="border: 1px solid var(--color-border); padding: 8px;">Descriptive</th>
                                <th style="border: 1px solid var(--color-border); padding: 8px;">OMR</th>
                                <th style="border: 1px solid var(--color-border); padding: 8px;">Internal</th>
                                <th style="border: 1px solid var(--color-border); padding: 8px;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            if (science.physics) {
                const physicsTotal = science.physics.descriptive + science.physics.omr + science.physics.internal;
                breakdownHtml += `
                    <tr>
                        <td style="border: 1px solid var(--color-border); padding: 8px;"><strong>Physics</strong></td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.physics.descriptive}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.physics.omr}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.physics.internal}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;"><strong>${physicsTotal}</strong></td>
                    </tr>
                `;
            }
            
            if (science.chemistry) {
                const chemistryTotal = science.chemistry.descriptive + science.chemistry.omr + science.chemistry.internal;
                breakdownHtml += `
                    <tr>
                        <td style="border: 1px solid var(--color-border); padding: 8px;"><strong>Chemistry</strong></td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.chemistry.descriptive}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.chemistry.omr}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.chemistry.internal}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;"><strong>${chemistryTotal}</strong></td>
                    </tr>
                `;
            }
            
            if (science.biology) {
                const biologyTotal = science.biology.descriptive + science.biology.omr + science.biology.internal;
                breakdownHtml += `
                    <tr>
                        <td style="border: 1px solid var(--color-border); padding: 8px;"><strong>Biology</strong></td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.biology.descriptive}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.biology.omr}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.biology.internal}</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;"><strong>${biologyTotal}</strong></td>
                    </tr>
                `;
            }
            
            if (science.combined) {
                const combinedTotal = science.combined.descriptive + science.combined.omr + science.combined.internal;
                breakdownHtml += `
                    <tr style="background: var(--color-bg-1); font-weight: bold;">
                        <td style="border: 1px solid var(--color-border); padding: 8px;"><strong>COMBINED TOTAL</strong></td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.combined.descriptive}/45</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.combined.omr}/45</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;">${science.combined.internal}/10</td>
                        <td style="border: 1px solid var(--color-border); padding: 8px; text-align: center;"><strong>${combinedTotal}/100</strong></td>
                    </tr>
                `;
            }
            
            breakdownHtml += `</tbody></table></div>`;
            
            // Display in a new window
            const newWindow = window.open('', '_blank', 'width=600,height=400');
            newWindow.document.write(`
                <html>
                <head>
                    <title>Science Marks Breakdown</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; background: var(--color-background); }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { border: 1px solid #ddd; padding: 8px; }
                        th { background: #f0f0f0; }
                    </style>
                </head>
                <body>${breakdownHtml}</body>
                </html>
            `);
            newWindow.document.close();
        }
        
        function calculateWeightedMarks(marks) {
            const processedMarks = {};
            let grandTotal = 0;
            let totalUT1 = 0, totalUT2 = 0, totalHY = 0, totalAnnual = 0;
            let totalWeightedUT = 0, totalWeightedHY = 0, totalWeightedAnnual = 0;
            
            Object.keys(marks).forEach(subject => {
                const subjectMarks = marks[subject];
                
                // Calculate weighted marks
                const unitTestAvg = (subjectMarks.unit_test_1 + subjectMarks.unit_test_2) / 2;
                const weightedUT = Math.round((unitTestAvg * weightage.unit_test) / 100);
                const weightedHY = Math.round((subjectMarks.half_yearly * weightage.half_yearly) / 100);
                const weightedAnnual = Math.round((subjectMarks.annual * weightage.annual) / 100);
                const totalMarks = weightedUT + weightedHY + weightedAnnual;
                
                // Calculate grade
                const grade = getGrade(totalMarks);
                
                processedMarks[subject] = {
                    ...subjectMarks,
                    weightedUT,
                    weightedHY,
                    weightedAnnual,
                    totalMarks,
                    grade
                };
                
                // Update totals
                totalUT1 += subjectMarks.unit_test_1;
                totalUT2 += subjectMarks.unit_test_2;
                totalHY += subjectMarks.half_yearly;
                totalAnnual += subjectMarks.annual;
                totalWeightedUT += weightedUT;
                totalWeightedHY += weightedHY;
                totalWeightedAnnual += weightedAnnual;
                grandTotal += totalMarks;
            });
            
            processedMarks.totals = {
                totalUT1, totalUT2, totalHY, totalAnnual,
                totalWeightedUT, totalWeightedHY, totalWeightedAnnual,
                grandTotal,
                percentage: Math.round((grandTotal / 600) * 100),
                overallGrade: getGrade(Math.round(grandTotal / 6))
            };
            
            return processedMarks;
        }
        
        function getGrade(marks) {
            if (marks >= 90) return 'A+';
            if (marks >= 80) return 'A';
            if (marks >= 70) return 'B+';
            if (marks >= 60) return 'B';
            if (marks >= 50) return 'C';
            if (marks >= 40) return 'D';
            return 'E';
        }
        
        function updateDashboardMarks(processedMarks) {
            // Convert to old format for dashboard compatibility
            const oldFormatMarks = {
                mathematics: processedMarks.mathematics?.totalMarks || 0,
                science: processedMarks.creative_science?.totalMarks || 0,
                english: processedMarks.english_1?.totalMarks || 0,
                social_studies: processedMarks.social_science?.totalMarks || 0,
                hindi: processedMarks.hindi?.totalMarks || 0
            };
            
            currentStudentMarks = oldFormatMarks;
            
            // Update current results display
            document.getElementById('currentTotal').textContent = processedMarks.totals.grandTotal;
            document.getElementById('currentPercentage').textContent = processedMarks.totals.percentage + '%';
            document.getElementById('currentResult').textContent = processedMarks.totals.percentage >= 40 ? 'PASS' : 'FAIL';
            document.getElementById('currentRank').textContent = currentUser.rank;
            
            // Calculate and display results
            calculateResults();
        }

        function showTeacherDashboard() {
            console.log('Showing teacher dashboard for:', currentUser.name);
            document.getElementById('loginPage').style.display = 'none';
            document.getElementById('teacherDashboard').classList.add('active');
            
            // Update teacher info
            document.getElementById('teacherName').textContent = 'Class 9 Teacher';
            
            // Initialize teacher sections
            setTimeout(() => {
                loadStudentsTable();
                loadClassAnalytics();
                populateReportStudentSelect();
                updateTeacherStats();
            }, 100);
        }
        
        function updateTeacherStats() {

        }
        
        function populateReportStudentSelect() {
            const select = document.getElementById('reportStudentSelect');
            if (!select) return;
            
            select.innerHTML = '<option value="">Choose a student...</option>';
            
            Object.keys(studentsData).forEach(studentId => {
                const student = studentsData[studentId];
                const option = document.createElement('option');
                option.value = studentId;
                option.textContent = `${student.name} (${studentId})`;
                select.appendChild(option);
            });
        }
        
        function generateStudentReport() {
            const select = document.getElementById('reportStudentSelect');
            const selectedStudentId = select.value;
            
            if (!selectedStudentId) {
                document.getElementById('studentReportContainer').style.display = 'none';
                return;
            }
            
            const student = studentsData[selectedStudentId];
            const hasMarks = checkIfStudentHasMarks(student.marks);
            
            let reportHtml = `
                <div class="student-report">
                    <div class="report-header">
                        <h3>${student.name} - Individual Report</h3>
                        <p>Username: ${student.username} | Registration: ${student.registration_no}</p>
                        <p>MIL: ${student.mil_subject} | Elective: ${student.elective_subject}</p>
                    </div>
            `;
            
            if (hasMarks) {
                const finalPercentage = calculateFinalPercentage(student.marks);
                reportHtml += `
                    <table class="report-table">
                        <thead>
                            <tr>
                                <th>Exam</th>
                                <th>English</th>
                                <th>Mathematics</th>
                                <th>Social</th>
                                <th>Science</th>
                                <th>${student.mil_subject}</th>
                                <th>${student.elective_subject}</th>
                                <th>Weighted %</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                const examNames = {
                    unit_test_1: 'Unit Test 1',
                    half_yearly: 'Half Yearly',
                    unit_test_2: 'Unit Test 2',
                    annual: 'Annual'
                };
                
                Object.keys(examNames).forEach(examKey => {
                    const exam = student.marks[examKey];
                    if (exam && Object.keys(exam).length > 0) {
                        reportHtml += `<tr><td><strong>${examNames[examKey]}</strong></td>`;
                        
                        ['english', 'maths', 'social', 'science', 'mil', 'elective'].forEach(subject => {
                            if (exam[subject] !== undefined) {
                                if (typeof exam[subject] === 'number') {
                                    reportHtml += `<td>${exam[subject]}/50</td>`;
                                } else if (typeof exam[subject] === 'object') {
                                    if (subject === 'science' && exam[subject].combined) {
                                        const total = exam[subject].combined.descriptive + exam[subject].combined.omr + exam[subject].combined.internal;
                                        reportHtml += `<td>${total}/100</td>`;
                                    } else if (subject === 'mil') {
                                        reportHtml += `<td>${exam[subject].descriptive}/100</td>`;
                                    } else if (subject === 'elective') {
                                        const total = exam[subject].descriptive + (exam[subject].internal || 0);
                                        reportHtml += `<td>${total}/100</td>`;
                                    } else {
                                        const total = exam[subject].descriptive + exam[subject].omr + exam[subject].internal;
                                        reportHtml += `<td>${total}/100</td>`;
                                    }
                                }
                            } else {
                                reportHtml += `<td>-</td>`;
                            }
                        });
                        
                        const weightedPercentage = calculateExamWeightedPercentage(exam, examKey);
                        reportHtml += `<td><strong>${weightedPercentage.toFixed(1)}%</strong></td></tr>`;
                    }
                });
                
                reportHtml += `</tbody></table>`;
                
                reportHtml += `
                    <div class="report-summary">
                        <h4>Overall Performance</h4>
                        <p><strong>Final Percentage:</strong> ${finalPercentage.toFixed(2)}%</p>
                        <p><strong>Result:</strong> <span class="status status--${finalPercentage >= 30 ? 'success' : 'error'}">${finalPercentage >= 30 ? 'PASS' : 'FAIL'}</span></p>
                        <p><strong>Marks Needed to Pass:</strong> ${finalPercentage >= 30 ? 'Already Passed!' : `${(180 - (finalPercentage/100*600)).toFixed(0)} more marks needed`}</p>
                    </div>
                `;
            } else {
                reportHtml += `
                    <div class="no-marks">
                        <p>No marks have been entered for this student yet.</p>
                    </div>
                `;
            }
            
            reportHtml += `</div>`;
            
            document.getElementById('studentReportContainer').innerHTML = reportHtml;
            document.getElementById('studentReportContainer').style.display = 'block';
        }

        function populateOfficialReportCard(processedMarks) {
            // Update student info
            document.getElementById('reportStudentName').textContent = currentUser.name;
            document.getElementById('reportClass').textContent = `${currentUser.class}-${currentUser.section}`;
            document.getElementById('reportRoll').textContent = currentUser.rollNumber;
            document.getElementById('reportDOB').textContent = currentUser.dob;
            document.getElementById('reportAdmission').textContent = currentUser.admission_no;
            document.getElementById('reportAttendance').textContent = currentUser.attendance;
            document.getElementById('reportRank').textContent = currentUser.rank;
            document.getElementById('reportPercentage').textContent = processedMarks.totals.percentage + '%';
            
            // Populate marks table
            const tableBody = document.getElementById('detailedMarksTableBody');
            tableBody.innerHTML = '';
            
            Object.keys(subjectNames).forEach(subjectKey => {
                const subject = processedMarks[subjectKey];
                if (!subject) return;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${subjectNames[subjectKey]}</strong></td>
                    <td>${subject.unit_test_1}</td>
                    <td>${subject.unit_test_2}</td>
                    <td>${subject.half_yearly}</td>
                    <td>${subject.annual}</td>
                    <td>${subject.weightedUT}</td>
                    <td>${subject.weightedHY}</td>
                    <td>${subject.weightedAnnual}</td>
                    <td><strong>${subject.totalMarks}</strong></td>
                    <td><strong>${subject.grade}</strong></td>
                `;
                tableBody.appendChild(row);
            });
            
            // Update totals
            const totals = processedMarks.totals;
            document.getElementById('totalUT1').textContent = totals.totalUT1;
            document.getElementById('totalUT2').textContent = totals.totalUT2;
            document.getElementById('totalHY').textContent = totals.totalHY;
            document.getElementById('totalAnnual').textContent = totals.totalAnnual;
            document.getElementById('totalWeightedUT').textContent = totals.totalWeightedUT;
            document.getElementById('totalWeightedHY').textContent = totals.totalWeightedHY;
            document.getElementById('totalWeightedAnnual').textContent = totals.totalWeightedAnnual;
            document.getElementById('grandTotal').textContent = totals.grandTotal;
            document.getElementById('overallGrade').textContent = totals.overallGrade;
            
            // Update co-scholastic activities
            document.getElementById('reportPT').textContent = currentUser.co_scholastic.physical_training;
            document.getElementById('reportDrawing').textContent = currentUser.co_scholastic.drawing;
            document.getElementById('reportCoCurricular').textContent = currentUser.co_scholastic.co_curricular;
            
            // Update remarks based on performance
            const percentage = totals.percentage;
            let remarks = '';
            if (percentage >= 90) {
                remarks = 'Outstanding performance! Excellent work in all subjects.';
            } else if (percentage >= 80) {
                remarks = 'Very good performance. Keep up the excellent work!';
            } else if (percentage >= 70) {
                remarks = 'Good performance. Continue working hard.';
            } else if (percentage >= 60) {
                remarks = 'Satisfactory performance. Focus on improvement areas.';
            } else {
                remarks = 'Needs significant improvement. Please work harder.';
            }
            document.getElementById('reportRemarks').textContent = remarks;
        }
        
        function generateComparisonCharts(processedMarks) {
            // Calculate class averages for comparison
            const classAverages = calculateClassAverages();
            
            // Your scores vs class averages
            const yourScores = [];
            const avgScores = [];
            const labels = [];
            
            Object.keys(subjectNames).forEach(subjectKey => {
                const yourScore = processedMarks[subjectKey]?.totalMarks || 0;
                const avgScore = classAverages[subjectKey] || 0;
                
                yourScores.push(yourScore);
                avgScores.push(avgScore);
                labels.push(subjectNames[subjectKey]);
            });
            
            const ctx = document.getElementById('comparisonBarChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Your Score',
                            data: yourScores,
                            backgroundColor: '#1FB8CD',
                            borderColor: '#1FB8CD',
                            borderWidth: 1
                        },
                        {
                            label: 'Class Average',
                            data: avgScores,
                            backgroundColor: '#FFC185',
                            borderColor: '#FFC185',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Marks'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Subjects'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        },
                        title: {
                            display: true,
                            text: 'Your Performance vs Class Average'
                        }
                    }
                }
            });
        }
        
        function calculateClassAverages() {
            const averages = {};
            const subjectKeys = Object.keys(subjectNames);
            
            subjectKeys.forEach(subjectKey => {
                let total = 0;
                let count = 0;
                
                Object.values(studentsData).forEach(student => {
                    if (student.marks && student.marks[subjectKey]) {
                        const processed = calculateWeightedMarks({ [subjectKey]: student.marks[subjectKey] });
                        total += processed[subjectKey]?.totalMarks || 0;
                        count++;
                    }
                });
                
                averages[subjectKey] = count > 0 ? Math.round(total / count) : 0;
            });
            
            return averages;
        }
        
        function downloadProgressReport() {
            // Create a comprehensive report including all sections
            const reportContent = document.getElementById('studentDashboard').innerHTML;
            
            // Create a new window with print-friendly styling
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                <head>
                    <title>Progress Report - ${currentUser.name}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .student-nav-tabs { display: none; }
                        .dashboard-header { display: none; }
                        .btn { display: none; }
                        .student-tab-content { display: block !important; }
                        .chart-container canvas { max-width: 100%; }
                    </style>
                </head>
                <body>
                    <h1>Complete Progress Report</h1>
                    <h2>${currentUser.name} - Roll: ${currentUser.rollNumber}</h2>
                    <div>${reportContent}</div>
                </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
        }
        
        function downloadReportCard() {
            // Focus on report card section only
            const reportCard = document.getElementById('officialReportCard');
            
            // Create a new window for printing
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                <head>
                    <title>Official Report Card - ${currentUser.name}</title>
                    <style>
                        body { 
                            font-family: 'Times New Roman', serif; 
                            margin: 0; 
                            padding: 20px;
                            background: white;
                            color: black;
                        }
                        .report-card { 
                            max-width: none;
                            margin: 0;
                            padding: 20px;
                            border: 2px solid #1FB8CD;
                            background: white !important;
                        }
                        table { border-collapse: collapse; width: 100%; }
                        th, td { border: 1px solid black; padding: 8px; text-align: center; }
                        th { background: #f0f0f0; }
                        .grand-total { background: #1FB8CD !important; color: white; }
                    </style>
                </head>
                <body>
                    ${reportCard.outerHTML}
                </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
        }
        
        function calculateResults() {
            if (!currentStudentMarks) return;
            
            const math = currentStudentMarks.mathematics || 0;
            const science = currentStudentMarks.science || 0;
            const english = currentStudentMarks.english || 0;
            const social = currentStudentMarks.social_studies || 0;
            const hindi = currentStudentMarks.hindi || 0;
            
            const totalMarks = math + science + english + social + hindi;
            const percentage = Math.round((totalMarks / 600) * 100);
            
            // Stream recommendation based on marks
            let stream = 'Arts';
            
            if (math + science > 150) {
                stream = 'Science';
            } else if (math + social > 140) {
                stream = 'Commerce';
            }
            
            // Generate charts
            generateStudentCharts();
            
            // Generate analysis
            generatePerformanceAnalysis(stream);
        }

        function generateStudentCharts() {
            // Pie Chart - Subject-wise marks
            const pieCtx = document.getElementById('pieChart').getContext('2d');
            new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: ['Mathematics', 'Science', 'English', 'Social Studies', 'Hindi'],
                    datasets: [{
                        data: [currentStudentMarks.mathematics, currentStudentMarks.science, currentStudentMarks.english, currentStudentMarks.social_studies, currentStudentMarks.hindi],
                        backgroundColor: ['#1FB8CD', '#FFC185', '#B4413C', '#ECEBD5', '#5D878F']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
            
            // Bar Chart - Marks vs Passing marks
            const barCtx = document.getElementById('barChart').getContext('2d');
            new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: ['Math', 'Science', 'English', 'Social', 'Hindi'],
                    datasets: [
                        {
                            label: 'Your Marks',
                            data: [currentStudentMarks.mathematics, currentStudentMarks.science, currentStudentMarks.english, currentStudentMarks.social_studies, currentStudentMarks.hindi],
                            backgroundColor: '#1FB8CD'
                        },
                        {
                            label: 'Passing Marks',
                            data: [33, 33, 33, 33, 33],
                            backgroundColor: '#FFC185'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
            
            // Line Chart - Sample progress trend
            const lineCtx = document.getElementById('lineChart').getContext('2d');
            new Chart(lineCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Average Percentage',
                        data: [65, 68, 72, 75, 73, Math.round((currentStudentMarks.mathematics + currentStudentMarks.science + currentStudentMarks.english + currentStudentMarks.social_studies + currentStudentMarks.hindi) / 5)],
                        borderColor: '#1FB8CD',
                        backgroundColor: 'rgba(31, 184, 205, 0.1)',
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        function generatePerformanceAnalysis(recommendedStream) {
            const marks = currentStudentMarks;
            const subjects = ['Mathematics', 'Science', 'English', 'Social Studies', 'Hindi'];
            const values = [marks.mathematics, marks.science, marks.english, marks.social_studies, marks.hindi];
            
            // Strengths (>= 75%)
            const strengths = [];
            const improvements = [];
            
            subjects.forEach((subject, index) => {
                if (values[index] >= 75) {
                    strengths.push(subject);
                } else if (values[index] < 50) {
                    improvements.push(subject);
                }
            });
            
            document.getElementById('strengths').textContent = strengths.length > 0 ? 
                `You excel in: ${strengths.join(', ')}` : 'Keep working to identify your strengths!';
            
            document.getElementById('improvements').textContent = improvements.length > 0 ? 
                `Need improvement in: ${improvements.join(', ')}` : 'Great job! All subjects are performing well.';
            
            // Recommendations with stream suggestion
            const avgScore = values.reduce((a, b) => a + b, 0) / values.length;
            let recommendations = `Recommended Stream: ${recommendedStream}. `;
            
            if (improvements.length > 0) {
                recommendations += `Focus on improving ${improvements.join(' and ')}. `;
            }
            
            if (avgScore >= 80) {
                recommendations += 'Excellent performance! You have great potential for higher studies.';
            } else if (avgScore >= 60) {
                recommendations += 'Good performance overall. Keep working on consistency.';
            } else {
                recommendations += 'There\'s room for improvement. Consider additional support and practice.';
            }
            
            document.getElementById('recommendations').textContent = recommendations;
        }

        function loadStudentsTable() {
            const tbody = document.getElementById('studentsTableBody');
            if (!tbody) {
                console.log('Students table body not found');
                return;
            }
            
            tbody.innerHTML = '';
            
            // Sort students by roll number
            const sortedStudents = Object.keys(studentsData)
                .map(studentId => ({ id: studentId, ...studentsData[studentId] }))
                .sort((a, b) => a.roll_no - b.roll_no);
            
            sortedStudents.forEach(student => {
                const row = document.createElement('tr');
                const hasAnyMarks = checkIfStudentHasMarks(student.marks);
                row.innerHTML = `
                    <td><strong>${student.roll_no}</strong></td>
                    <td><strong>${student.name}</strong></td>
                    <td>${student.username}</td>
                    <td>${student.registration_no}</td>
                    <td>${student.dob}</td>
                    <td>${student.mil_subject || ''}</td>
                    <td>${student.elective_subject || ''}</td>
                    <td>
                        <button class="btn btn--sm btn-primary" onclick="viewStudentDetail('${student.id}')">View Details</button>
                        ${hasAnyMarks ? '<button class="btn btn--sm btn-secondary" style="margin-left: 4px;" onclick="editStudentMarks(\'' + student.id + '\')">Edit Marks</button>' : ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function loadRanking() {
            const rankingList = document.getElementById('rankingList');
            if (!rankingList) return;
            
            // Calculate rankings using new weighted system
            const rankings = Object.keys(studentsData).map(rollNo => {
                const student = studentsData[rollNo];
                const processedMarks = calculateWeightedMarks(student.marks);
                const totalMarks = processedMarks.totals.grandTotal;
                const percentage = processedMarks.totals.percentage;
                return { rollNo, name: student.name, totalMarks, percentage };
            }).sort((a, b) => b.percentage - a.percentage);
            
            rankingList.innerHTML = '';
            rankings.forEach((student, index) => {
                const rank = index + 1;
                const div = document.createElement('div');
                div.className = 'ranking-item';
                div.innerHTML = `
                    <div class="rank-badge ${rank <= 3 ? 'rank-' + rank : 'rank-other'}">${rank}</div>
                    <div style="flex: 1;">
                        <h4>${student.name}</h4>
                        <p>ID: ${student.studentId} | Marks: ${student.totalMarks}/1000 | Percentage: ${student.percentage}%</p>
                    </div>
                    ${rank === 1 ? '<i class="fas fa-trophy" style="color: #ffd700; font-size: var(--font-size-xl);"></i>' : ''}
                `;
                rankingList.appendChild(div);
            });
        }

        function loadComparisonControls() {
            const checkboxContainer = document.getElementById('compareCheckboxes');
            if (!checkboxContainer) return;
            checkboxContainer.innerHTML = '';
            
            Object.keys(studentsData).forEach(studentId => {
                const student = studentsData[studentId];
                const div = document.createElement('div');
                div.className = 'student-checkbox';
                div.innerHTML = `
                    <input type="checkbox" id="compare_${studentId}" value="${studentId}">
                    <label for="compare_${studentId}">${student.name} (${studentId})</label>
                `;
                checkboxContainer.appendChild(div);
            });
        }

        function compareSelectedStudents() {
            const checkboxes = document.querySelectorAll('#compareCheckboxes input[type="checkbox"]:checked');
            const selectedStudents = Array.from(checkboxes).map(cb => cb.value);
            
            if (selectedStudents.length < 2 || selectedStudents.length > 5) {
                alert('Please select 2-5 students for comparison.');
                return;
            }
            
            // Generate comparison chart with new subject system
            const comparisonResults = document.getElementById('comparisonResults');
            comparisonResults.style.display = 'block';
            
            const ctx = document.getElementById('comparisonChart').getContext('2d');
            const subjectKeys = ['mathematics', 'creative_science', 'english_1', 'social_science', 'hindi'];
            const subjectLabels = ['Math', 'Science', 'English', 'Social', 'Hindi'];
            
            const datasets = selectedStudents.map((studentId, index) => {
                const student = studentsData[studentId];
                const processedMarks = calculateWeightedMarks(student.marks);
                const colors = ['#1FB8CD', '#FFC185', '#B4413C', '#ECEBD5', '#5D878F'];
                
                const subjectTotals = subjectKeys.map(key => processedMarks[key]?.totalMarks || 0);
                
                return {
                    label: student.name,
                    data: subjectTotals,
                    backgroundColor: colors[index % colors.length],
                    borderColor: colors[index % colors.length],
                    borderWidth: 2
                };
            });
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: subjectLabels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
            
            // Generate comparison table with new system
            const comparisonTable = document.getElementById('comparisonTable');
            let tableHTML = '<table class="students-table"><thead><tr><th>Student</th><th>Math</th><th>Science</th><th>English</th><th>Social</th><th>Hindi</th><th>Total</th><th>%</th></tr></thead><tbody>';
            
            selectedStudents.forEach(studentId => {
                const student = studentsData[studentId];
                const processedMarks = calculateWeightedMarks(student.marks);
                const subjectTotals = subjectKeys.map(key => processedMarks[key]?.totalMarks || 0);
                const total = processedMarks.totals.grandTotal;
                const percentage = processedMarks.totals.percentage;
                
                tableHTML += `
                    <tr>
                        <td><strong>${student.roll_no}</strong></td>
                        <td><strong>${student.name}</strong></td>
                        <td>${subjectTotals[0] || '-'}</td>
                        <td>${subjectTotals[1] || '-'}</td>
                        <td>${subjectTotals[2] || '-'}</td>
                        <td>${subjectTotals[3] || '-'}</td>
                        <td>${subjectTotals[4] || '-'}</td>
                        <td>${subjectTotals[5] || '-'}</td>
                        <td><strong>${total}/600</strong></td>
                        <td><strong>${percentage}%</strong></td>
                    </tr>
                `;
            });
            
            tableHTML += '</tbody></table>';
            comparisonTable.innerHTML = tableHTML;
        }

        // Register new student function
        function registerNewStudent() {
            const formData = new FormData(document.getElementById('studentRegistrationForm'));
            
            const newStudent = {
                name: formData.get('studentFullName'),
                username: formData.get('studentUsername'),
                registration_no: formData.get('studentRegNo'),
                dob: formData.get('studentDOB'),
                password: 'changeme',
                mil_choice: formData.get('milChoice'),
                elective_choice: formData.get('electiveChoice'),
                roll_number: Object.keys(studentsData).length + 901,
                class: '9',
                section: 'A',
                admission_no: (4000 + Object.keys(studentsData).length).toString(),
                attendance: '0/189',
                rank: Object.keys(studentsData).length + 1,
                marks: {},
                co_scholastic: {
                    physical_training: 'B',
                    drawing: 'B',
                    co_curricular: 'B'
                }
            };
            
            // Add to students data
            studentsData[newStudent.username] = newStudent;
            
            // Update student count display
            document.getElementById('totalStudents').textContent = '115';
            
            alert(`Student ${newStudent.name} registered successfully!\nUsername: ${newStudent.username}\nPassword: changeme`);
            
            // Reset form
            document.getElementById('studentRegistrationForm').reset();
            
            // Refresh students table if visible
            if (document.getElementById('studentsTab').classList.contains('active')) {
                loadStudentsTable();
            }
        }
        
        function loadClassAnalytics() {
            // Calculate class averages using new weighted system
            const subjectKeys = ['mathematics', 'creative_science', 'english_1', 'social_science', 'hindi'];
            const classAverages = subjectKeys.map(subjectKey => {
                let total = 0;
                let count = 0;
                
                Object.values(studentsData).forEach(student => {
                    if (student.marks && student.marks[subjectKey]) {
                        const processed = calculateWeightedMarks({ [subjectKey]: student.marks[subjectKey] });
                        total += processed[subjectKey]?.totalMarks || 0;
                        count++;
                    }
                });
                
                return count > 0 ? Math.round(total / count) : 0;
            });
            
            // Class Average Chart
            const avgCtx = document.getElementById('classAverageChart');
            if (!avgCtx) return;
            const avgCtxContext = avgCtx.getContext('2d');
            new Chart(avgCtxContext, {
                type: 'pie',
                data: {
                    labels: ['Math', 'Science', 'English', 'Social', 'Hindi'],
                    datasets: [{
                        data: classAverages,
                        backgroundColor: ['#1FB8CD', '#FFC185', '#B4413C', '#ECEBD5', '#5D878F']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            
            // Pass/Fail Distribution with new system
            let passCount = 0;
            Object.values(studentsData).forEach(student => {
                const processedMarks = calculateWeightedMarks(student.marks);
                const percentage = processedMarks.totals.percentage;
                if (percentage >= 40) passCount++;
            });
            
            const passFailCtx = document.getElementById('passFailChart');
            if (!passFailCtx) return;
            const passFailCtxContext = passFailCtx.getContext('2d');
            new Chart(passFailCtxContext, {
                type: 'doughnut',
                data: {
                    labels: ['Pass', 'Fail'],
                    datasets: [{
                        data: [passCount, Object.keys(studentsData).length - passCount],
                        backgroundColor: ['#1FB8CD', '#B4413C']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            
            // Top 5 Students with new system
            const topStudents = Object.keys(studentsData).map(studentId => {
                const student = studentsData[studentId];
                const processedMarks = calculateWeightedMarks(student.marks);
                return { name: student.name, totalMarks: processedMarks.totals.grandTotal };
            }).sort((a, b) => b.totalMarks - a.totalMarks).slice(0, 5);
            
            const topCtx = document.getElementById('topStudentsChart');
            if (!topCtx) return;
            const topCtxContext = topCtx.getContext('2d');
            new Chart(topCtxContext, {
                type: 'bar',
                data: {
                    labels: topStudents.map(s => s.name),
                    datasets: [{
                        label: 'Total Marks',
                        data: topStudents.map(s => s.totalMarks),
                        backgroundColor: '#1FB8CD'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    scales: {
                        x: {
                            beginAtZero: true,
                            max: 600
                        }
                    }
                }
            });
            
            // Subject Performance with new system
            const subjectPerfCtx = document.getElementById('subjectPerformanceChart');
            if (!subjectPerfCtx) return;
            const subjectPerfCtxContext = subjectPerfCtx.getContext('2d');
            new Chart(subjectPerfCtxContext, {
                type: 'bar',
                data: {
                    labels: ['Math', 'Science', 'English', 'Social', 'Hindi'],
                    datasets: [{
                        label: 'Class Average',
                        data: classAverages,
                        backgroundColor: '#1FB8CD'
                    }, {
                        label: 'Passing Marks',
                        data: [40, 40, 40, 40, 40],
                        backgroundColor: '#FFC185'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        function switchTeacherTab(tabName) {
            console.log('Switching to teacher tab:', tabName);
            document.querySelectorAll('.teacher-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchTeacherTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`${tabName}Tab`).classList.add('active');
            
            // Initialize specific tab content
            if (tabName === 'students') {
                loadStudentsTable();
            } else if (tabName === 'reports') {
                populateReportStudentSelect();
                loadComparisonControls();
            } else if (tabName === 'editmarks') {
                resetEditMarksWizard();

            } else if (tabName === 'changepassword') {
                // Clear password form when opening
                document.getElementById('teacherPasswordChangeForm').reset();
                clearPasswordValidation('teacher');
            }
        }

        function searchStudents() {
            const searchInput = document.getElementById('searchInput');
            if (!searchInput) return;
            
            const searchTerm = searchInput.value.toLowerCase();
            const rows = document.querySelectorAll('#studentsTableBody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function viewStudentDetail(studentId) {
            const student = studentsData[studentId];
            const processedMarks = calculateWeightedMarks(student.marks);
            
            const detailHtml = `
                <div style="max-width: 800px; margin: 20px auto; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                    <h2 style="color: #1FB8CD; text-align: center; margin-bottom: 20px;">${student.name} - Detailed Report</h2>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div><strong>Student ID:</strong> ${studentId}</div>
                        <div><strong>Class:</strong> ${student.class}-${student.section}</div>
                        <div><strong>Date of Birth:</strong> ${student.dob}</div>
                        <div><strong>Attendance:</strong> ${student.attendance}</div>
                    </div>
                    
                    <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
                        <thead>
                            <tr style="background: #f0f0f0;">
                                <th style="border: 1px solid #ddd; padding: 8px;">Subject</th>
                                <th style="border: 1px solid #ddd; padding: 8px;">Total Marks</th>
                                <th style="border: 1px solid #ddd; padding: 8px;">Grade</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${Object.keys(subjectNames).map(key => `
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">${subjectNames[key]}</td>
                                    <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${processedMarks[key]?.totalMarks || 0}/100</td>
                                    <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${processedMarks[key]?.grade || '-'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                        <tfoot>
                            <tr style="background: #1FB8CD; color: white; font-weight: bold;">
                                <td style="border: 1px solid #ddd; padding: 8px;">TOTAL</td>
                                <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${processedMarks.totals.grandTotal}/600</td>
                                <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${processedMarks.totals.overallGrade}</td>
                            </tr>
                        </tfoot>
                    </table>
                    
                    <div style="text-align: center; margin-top: 20px;">
                        <p><strong>Percentage:</strong> ${processedMarks.totals.percentage}%</p>
                        <p><strong>Rank:</strong> ${student.rank}</p>
                        <p><strong>Result:</strong> ${processedMarks.totals.percentage >= 30 ? 'PASS' : 'FAIL'}</p>
                    </div>
                </div>
            `;
            
            const newWindow = window.open('', '_blank', 'width=900,height=700');
            newWindow.document.write(`
                <html>
                <head>
                    <title>Student Detail - ${student.name}</title>
                    <style>body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }</style>
                </head>
                <body>${detailHtml}</body>
                </html>
            `);
            newWindow.document.close();
        }

        // Password Change Functions
        function showChangePasswordModal() {
            document.getElementById('changePasswordModal').style.display = 'flex';
        }
        
        function hideChangePasswordModal() {
            document.getElementById('changePasswordModal').style.display = 'none';
            // Clear form
            document.getElementById('studentPasswordChangeForm').reset();
            clearPasswordValidation('student');
        }
        
        function togglePasswordVisibility(fieldId) {
            const field = document.getElementById(fieldId);
            const button = field.parentNode.querySelector('.password-toggle i');
            
            if (field.type === 'password') {
                field.type = 'text';
                button.className = 'fas fa-eye-slash';
            } else {
                field.type = 'password';
                button.className = 'fas fa-eye';
            }
        }
        
        function checkStudentPasswordStrength() {
            const password = document.getElementById('studentNewPassword').value;
            const strengthDiv = document.getElementById('studentPasswordStrength');
            const req1 = document.getElementById('studentReq1');
            const req2 = document.getElementById('studentReq2');
            
            let strength = 0;
            let strengthText = '';
            let strengthClass = '';
            
            // Check length (minimum 6)
            if (password.length >= 6) {
                strength++;
                req1.classList.add('met');
                req1.innerHTML = '<i class="fas fa-check"></i> Minimum 6 characters';
            } else {
                req1.classList.remove('met');
                req1.innerHTML = '<i class="fas fa-times"></i> Minimum 6 characters';
            }
            
            // Check letters and numbers
            if (/[a-zA-Z]/.test(password) && /[0-9]/.test(password)) {
                strength++;
                req2.classList.add('met');
                req2.innerHTML = '<i class="fas fa-check"></i> Contains letters and numbers';
            } else {
                req2.classList.remove('met');
                req2.innerHTML = '<i class="fas fa-times"></i> Contains letters and numbers';
            }
            
            // Additional strength checks
            if (password.length >= 8) strength++;
            if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
            
            if (strength <= 1) {
                strengthText = 'Weak';
                strengthClass = 'weak';
            } else if (strength <= 2) {
                strengthText = 'Medium';
                strengthClass = 'medium';
            } else {
                strengthText = 'Strong';
                strengthClass = 'strong';
            }
            
            strengthDiv.innerHTML = `
                <div class="strength-bar strength-${strengthClass}"></div>
                <div class="strength-text ${strengthClass}">${strengthText}</div>
            `;
            
            checkStudentPasswordMatch();
            updateStudentPasswordButton();
        }
        
        function checkStudentPasswordMatch() {
            const newPassword = document.getElementById('studentNewPassword').value;
            const confirmPassword = document.getElementById('studentConfirmPassword').value;
            const matchDiv = document.getElementById('studentPasswordMatch');
            const req3 = document.getElementById('studentReq3');
            
            if (confirmPassword.length > 0) {
                if (newPassword === confirmPassword) {
                    matchDiv.innerHTML = '<i class="fas fa-check"></i> Passwords match';
                    matchDiv.className = 'password-match match-success';
                    req3.classList.add('met');
                    req3.innerHTML = '<i class="fas fa-check"></i> Passwords match';
                } else {
                    matchDiv.innerHTML = '<i class="fas fa-times"></i> Passwords do not match';
                    matchDiv.className = 'password-match match-error';
                    req3.classList.remove('met');
                    req3.innerHTML = '<i class="fas fa-times"></i> Passwords match';
                }
            } else {
                matchDiv.innerHTML = '';
                req3.classList.remove('met');
                req3.innerHTML = '<i class="fas fa-times"></i> Passwords match';
            }
            
            updateStudentPasswordButton();
        }
        
        function updateStudentPasswordButton() {
            const currentPassword = document.getElementById('studentCurrentPassword').value;
            const newPassword = document.getElementById('studentNewPassword').value;
            const confirmPassword = document.getElementById('studentConfirmPassword').value;
            const button = document.getElementById('studentUpdatePasswordBtn');
            
            const isValid = currentPassword.length > 0 &&
                          newPassword.length >= 6 &&
                          /[a-zA-Z]/.test(newPassword) &&
                          /[0-9]/.test(newPassword) &&
                          newPassword === confirmPassword &&
                          newPassword !== currentPassword;
            
            button.disabled = !isValid;
        }
        
        function checkTeacherPasswordStrength() {
            const password = document.getElementById('teacherNewPassword').value;
            const strengthDiv = document.getElementById('teacherPasswordStrength');
            const req1 = document.getElementById('teacherReq1');
            const req2 = document.getElementById('teacherReq2');
            
            let strength = 0;
            let strengthText = '';
            let strengthClass = '';
            
            // Check length (minimum 8 for teachers)
            if (password.length >= 8) {
                strength++;
                req1.classList.add('met');
                req1.innerHTML = '<i class="fas fa-check"></i> Minimum 8 characters';
            } else {
                req1.classList.remove('met');
                req1.innerHTML = '<i class="fas fa-times"></i> Minimum 8 characters';
            }
            
            // Check letters and numbers
            if (/[a-zA-Z]/.test(password) && /[0-9]/.test(password)) {
                strength++;
                req2.classList.add('met');
                req2.innerHTML = '<i class="fas fa-check"></i> Contains letters and numbers';
            } else {
                req2.classList.remove('met');
                req2.innerHTML = '<i class="fas fa-times"></i> Contains letters and numbers';
            }
            
            // Additional strength checks for teachers
            if (password.length >= 10) strength++;
            if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
            if (/[A-Z]/.test(password) && /[a-z]/.test(password)) strength++;
            
            if (strength <= 1) {
                strengthText = 'Weak';
                strengthClass = 'weak';
            } else if (strength <= 3) {
                strengthText = 'Medium';
                strengthClass = 'medium';
            } else {
                strengthText = 'Strong';
                strengthClass = 'strong';
            }
            
            strengthDiv.innerHTML = `
                <div class="strength-bar strength-${strengthClass}"></div>
                <div class="strength-text ${strengthClass}">${strengthText}</div>
            `;
            
            checkTeacherPasswordMatch();
            updateTeacherPasswordButton();
        }
        
        function checkTeacherPasswordMatch() {
            const newPassword = document.getElementById('teacherNewPassword').value;
            const confirmPassword = document.getElementById('teacherConfirmPassword').value;
            const matchDiv = document.getElementById('teacherPasswordMatch');
            const req3 = document.getElementById('teacherReq3');
            
            if (confirmPassword.length > 0) {
                if (newPassword === confirmPassword) {
                    matchDiv.innerHTML = '<i class="fas fa-check"></i> Passwords match';
                    matchDiv.className = 'password-match match-success';
                    req3.classList.add('met');
                    req3.innerHTML = '<i class="fas fa-check"></i> Passwords match';
                } else {
                    matchDiv.innerHTML = '<i class="fas fa-times"></i> Passwords do not match';
                    matchDiv.className = 'password-match match-error';
                    req3.classList.remove('met');
                    req3.innerHTML = '<i class="fas fa-times"></i> Passwords match';
                }
            } else {
                matchDiv.innerHTML = '';
                req3.classList.remove('met');
                req3.innerHTML = '<i class="fas fa-times"></i> Passwords match';
            }
            
            updateTeacherPasswordButton();
        }
        
        function updateTeacherPasswordButton() {
            const currentPassword = document.getElementById('teacherCurrentPassword').value;
            const newPassword = document.getElementById('teacherNewPassword').value;
            const confirmPassword = document.getElementById('teacherConfirmPassword').value;
            const button = document.getElementById('teacherUpdatePasswordBtn');
            
            const isValid = currentPassword.length > 0 &&
                          newPassword.length >= 8 &&
                          /[a-zA-Z]/.test(newPassword) &&
                          /[0-9]/.test(newPassword) &&
                          newPassword === confirmPassword &&
                          newPassword !== currentPassword;
            
            button.disabled = !isValid;
        }
        
        function clearPasswordValidation(userType) {
            const prefix = userType === 'student' ? 'student' : 'teacher';
            const strengthDiv = document.getElementById(`${prefix}PasswordStrength`);
            const matchDiv = document.getElementById(`${prefix}PasswordMatch`);
            
            if (strengthDiv) strengthDiv.innerHTML = '';
            if (matchDiv) matchDiv.innerHTML = '';
            
            // Reset requirements
            for (let i = 1; i <= 3; i++) {
                const req = document.getElementById(`${prefix}Req${i}`);
                if (req) {
                    req.classList.remove('met');
                    if (i === 1) {
                        req.innerHTML = `<i class="fas fa-times"></i> Minimum ${userType === 'student' ? '6' : '8'} characters`;
                    } else if (i === 2) {
                        req.innerHTML = '<i class="fas fa-times"></i> Contains letters and numbers';
                    } else if (i === 3) {
                        req.innerHTML = '<i class="fas fa-times"></i> Passwords match';
                    }
                }
            }
            
            // Disable button
            const button = document.getElementById(`${prefix}UpdatePasswordBtn`);
            if (button) button.disabled = true;
        }
        
        function changeStudentPassword() {
            const currentPassword = document.getElementById('studentCurrentPassword').value;
            const newPassword = document.getElementById('studentNewPassword').value;
            const confirmPassword = document.getElementById('studentConfirmPassword').value;
            
            // Validate current password
            if (currentUser.password !== currentPassword) {
                alert('Current password is incorrect. Please try again.');
                return;
            }
            
            // Validate new password
            if (newPassword.length < 6) {
                alert('Password must be at least 6 characters long.');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                alert('New password and confirm password do not match.');
                return;
            }
            
            if (newPassword === currentPassword) {
                alert('New password cannot be the same as current password.');
                return;
            }
            
            // Update password in data
            studentsData[currentUser.username].password = newPassword;
            
            // Show success message
            alert('Password changed successfully! Please login with your new password.');
            
            // Hide modal and logout
            hideChangePasswordModal();
            logout();
        }
        
        function changeTeacherPassword() {
            const currentPassword = document.getElementById('teacherCurrentPassword').value;
            const newPassword = document.getElementById('teacherNewPassword').value;
            const confirmPassword = document.getElementById('teacherConfirmPassword').value;
            
            // Find current teacher's ID
            let currentTeacherId = null;
            Object.keys(teachersData).forEach(teacherId => {
                if (teachersData[teacherId] === currentUser) {
                    currentTeacherId = teacherId;
                }
            });
            
            // Validate current password
            if (currentUser.password !== currentPassword) {
                alert('Current password is incorrect. Please try again.');
                return;
            }
            
            // Validate new password
            if (newPassword.length < 8) {
                alert('Password must be at least 8 characters long.');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                alert('New password and confirm password do not match.');
                return;
            }
            
            if (newPassword === currentPassword) {
                alert('New password cannot be the same as current password.');
                return;
            }
            
            // Update password in data
            if (currentTeacherId) {
                teachersData[currentTeacherId].password = newPassword;
            }
            
            // Show success message
            alert('Password changed successfully! Please login with your new password.');
            
            // Logout
            logout();
        }


        
        // Enhanced clearPasswordValidation function
        function clearPasswordValidation(prefix) {
            const strengthDiv = document.getElementById(`${prefix}PasswordStrength`);
            const matchDiv = document.getElementById(`${prefix}PasswordMatch`);
            
            if (strengthDiv) strengthDiv.innerHTML = '';
            if (matchDiv) matchDiv.innerHTML = '';
            
            // Reset requirements
            for (let i = 1; i <= 3; i++) {
                const req = document.getElementById(`${prefix}Req${i}`);
                if (req) {
                    req.classList.remove('met');
                    if (i === 1) {
                        req.innerHTML = `<i class="fas fa-times"></i> Minimum ${prefix === 'teacher' ? '8' : '6'} characters`;
                    } else if (i === 2) {
                        req.innerHTML = '<i class="fas fa-times"></i> Contains letters and numbers';
                    } else if (i === 3) {
                        req.innerHTML = '<i class="fas fa-times"></i> Passwords match';
                    }
                }
            }
            
            // Disable button
            const buttonMappings = {
                'student': 'studentUpdatePasswordBtn',
                'teacher': 'teacherUpdatePasswordBtn',

            };
            
            const button = document.getElementById(buttonMappings[prefix]);
            if (button) button.disabled = true;
        }
        


        function logout() {
            currentUser = null;
            currentUserType = null;
            currentStudentMarks = {};
            
            // Clear forms
            document.getElementById('registrationLogin').reset();
            document.getElementById('usernameLogin').reset();
            document.getElementById('teacherLogin').reset();
            
            // Hide any modals
            hideChangePasswordModal();
            
            // Reset any visible sections
            document.querySelectorAll('.student-tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            
            showLoginPage();
        }
    </script>

</body></html>
